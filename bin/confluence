#!/usr/bin/env python

from optparse import OptionParser
import ConfigParser
import xmlrpclib
import sys
import re
import os

class Confluence(object):
    def __init__(self, server, user, password):
        self.server = server + "/rpc/xmlrpc"
        self.user = user
        self.password = password
        self.rpc = xmlrpclib.Server(self.server)
        self.__try_to_get_token()

    def __try_to_get_token(self):
        token_file = os.path.expanduser('~/.confluence_token')
        if os.path.exists(token_file):
            f = open(token_file, "rb")
            self.token = f.read()
            f.close()
            #try to make a request
            try:
                s = self.rpc.confluence1.hasUser(self.token, "adragomi")
            except Exception, exc:
                print exc
                self.__login_and_save_token()
        else:
            self.__login_and_save_token()

    def __login_and_save_token(self):
        token_file = os.path.expanduser('~/.confluence_token')
        print "Wrong saved token, refreshing ..."
        self.token = self.rpc.confluence1.login(self.user, self.password)
        f = open(token_file, "wb+")
        f.write(self.token)
        f.close()

    def get_page(self, space, page):
        return self.rpc.confluence1.getPage(self.token, space, page)

    def put_page(self, space, page, content):
        page = self.get_page(space, page)
        page["content"] = content
        self.rpc.confluence1.storePage(self.token, space, page)

    def get_page_html(self, space, page):
        return self.rpc.confluence1.renderContent(self.token, space, page)

    def get_spaces(self):
        return self.rpc.confluence1.getSpaces(self.token)

    def search(self, query, space = None):
        m = {}
        m['type'] = 'page'
        if space != None:
            m['space'] = space
        return self.rpc.confluence1.search(self.token, query, m, 100)

if __name__ == "__main__":
    config = ConfigParser.ConfigParser()
    config.read(os.path.expanduser('~/.confluence'))

    command = sys.argv[1]
    
    c = Confluence(
            config.get('zerowing', 'server'), 
            config.get('zerowing', 'user'), 
            config.get('zerowing', 'password')
    )

    if command == "spaces":
        spaces = c.get_spaces()
        for s in spaces:
            if s['type'] == 'personal':
                continue
            print '%s (%s)' % (s['name'], s['url'])
    elif command == "getpage":
        space = sys.argv[2]
        page = sys.argv[3]
        p = c.get_page(space, page)
        print p["content"]

    elif command == "putpage":
        space = sys.argv[2]
        page = sys.argv[3]
        f = None
        try:
            if len(sys.argv) > 4 and sys.argv[4] != None:
                f = open(sys.argv[4])
            else:
                f = sys.stdin
        except:
            print "No content passed in !"

        new_content = f.read()

        p = c.get_page(space, page)
        p['content'] = content
    
    elif command == "search":
        query = sys.argv[2]
        vector = c.search(query)
        for v in vector:
            print v['url']
            print "\t" + v['excerpt'].encode("ascii", "replace")
            print "\n"
    elif command == "searchspace":
        space = sys.argv[2]
        query = sys.argv[3]
        vector = c.search(query, space)
        for v in vector:
            print v['url']
            print "\t" + v['excerpt'].encode("ascii", "replace")
            print "\n"
    elif command == "url":
        url = sys.argv[2]
        terms = re.match('(?i)(^.*?)(?:/display/)(.*?)/(.*$)',url).groups();
        server = terms[0]
        space  = terms[1]
        page   = terms[2].replace('+',' ')
        if server.find("zerowing") >= 0:
            pass
        else:
            c = Confluence(server, "guest", "guest")

        p = c.get_page(space, page)
        print p["content"]


