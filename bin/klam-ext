#!/bin/bash
#
# ADOBE CONFIDENTIAL
# __________________
#
# Copyright 2015 Adobe Systems Incorporated
# All Rights Reserved - Do Not Redistribute
#
# NOTICE:  All information contained herein is, and remains
# the property of Adobe Systems Incorporated and its suppliers,
# if any.  The intellectual and technical concepts contained
# herein are proprietary to Adobe Systems Incorporated and its
# suppliers and are protected by trade secret or copyright law.
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained
# from Adobe Systems Incorporated.
#

set -e -o pipefail

SELF=$(basename "$0")

KLAM_EXT_VERSION="1.17.6"
KLAM_BROWSER="${KLAM_BROWSER}"
KLAM_URL="${KLAM_URL:-https://klam.corp.adobe.com}"
KLAM_EXT_YML="$HOME/.klam-ext"
KLAM_EXT_SHELL_INT="$KLAM_EXT_SHELL_INT"
if [[ ! -t 1 ]]; then
  KLAM_EXT_SHELL_INT="" # when STDOUT is not a terminal, disable shell integration.
fi
if [ -z ${KLAM_EXT_PROFILE_PREFIX+x} ]; then
  KLAM_EXT_PROFILE_PREFIX="KLAM-";
else
  KLAM_EXT_PROFILE_PREFIX="$KLAM_EXT_PROFILE_PREFIX";
fi
KLAM_PYTHON="${KLAM_PYTHON:-python}"

MIN_VERSION_AWS_CLI="1.10.43"
MIN_VERSION_JQ="1.5"

usage() {
  echo "Usage: ${SELF} [profile] ACTION [options]"
}
ACTIONS=( version help cfg unset get getssh ssh profiles console ec2-hosts )
OPTIONS=( -v --verbose -q --quiet --env --json --color --no-color --force --1h --ssh-add --no-ssh-add)

help() {
cat <<HELP
${W}Usage:${R} ${C}${SELF} [profile] ACTION [options]${R}

${W}Actions:${R}
    ${Gr}profiles${R}          Lists all profiles defined in: ~/.klam-ext
    ${Gr}${R}PROFILE           Short cut for: ${Gr}get PROFILE${R}
    ${Gr}get${R} [PROFILE]     Get AWS Credentials and store them using the
    ${Gr}${R}                    ${Gr}aws configure${R} command, outputs the
    ${Gr}${R}                    ${Gr}AWS_PROFILE${R}. PROFILE is optional, if you set the
    ${Gr}${R}                    environment variable ${Gr}KLAM_PROFILE${R}.
    ${Gr}getssh${R}            Get SSH Private Key and store it in:
    ${Gr}${R}                    ${Gr}~/.ssh/klam.\${PROFILE}.pem${R}
    ${Gr}ec2-hosts${R}         List EC2 Instance using ${Gr}aws ec2 describe-instances${R},
    ${Gr}${R}                    additional parameters are passed through.
    ${Gr}ssh${R} [HOST|INS_ID] Connect to host or instance ID via ${Gr}ssh${R}, calls ${Gr}getssh${R} on
    ${Gr}${R}                    demand.
    ${Gr}unset${R}             Release current credentials.
    ${Gr}console${R}           Open the AWS management console in your default browser.
    ${Gr}version${R}           Display klam-ext version info: klam-ext/${KLAM_EXT_VERSION}

${W}Options:${R}
    ${Gr}-f|--force${R}        Always get fresh credentials
    ${Gr}-v|--verbose${R}      Increase verbosity
    ${Gr}-q|--quiet${R}        Suppress any verbose output
    ${Gr}--env${R}             When used with ${Gr}get${R} action the credentials
    ${Gr}${R}                    are being exported as ${Gr}AWS_ACCESS_KEY_ID${R},
    ${Gr}${R}                    ${Gr}AWS_SECRET_ACCESS_KEY${R} and ${Gr}AWS_SESSION_TOKEN${R}.
    ${Gr}${R}                    For backwards compatibility the legacy environment variable
    ${Gr}${R}                    ${Gr}AWS_SECURITY_TOKEN${R} is also exported.
    ${Gr}--json${R}            When used with ${Gr}get${R} action the credentials
    ${Gr}${R}                    are being exported as a JSON blob as it was
    ${Gr}${R}                    received from the pastebin.
    ${Gr}--1h${R}              Force default duration (1 hour). Klam will use ${Gr}AssumeRole${R} instead of
    ${Gr}${R}                    ${Gr}GetFederationToken${R}. Use when IAM capabilities are needed!
    ${Gr}--region${R} REGION   Specifiy AWS Region parameter for aws calls, e.g. ${Gr}ec2-hosts${R}.
    ${Gr}-d|--dedicated${R}    When used with ${Gr}console${R} action, a new browser instance
    ${Gr}${R}                    will be launched with a dedicated profile.
    ${Gr}${R}                    (only works with Google Chrome)
    ${Gr}--ssh-add${R}         Adds the fetched SSH private key to the SSH Agent.

${W}BASH Integration:${R}
    To allow ${Gr}klam-ext${R} to change the ${Gr}AWS_PROFILE${R} environment variable
    when the AWS Credentials have been retrieved, there needs to be a bash
    function to wrap the invocation of the shell script.

    To activate the ${Gr}bash-integration${R} in your current shell, evaluate the following cmd:
        ${C}eval "\$(klam-ext bash-integration)"${R}

    Add the following to your ${Gr}~/.bash_profile${R} to enable it for every new shell:
        ${C}if which klam-ext >/dev/null 2>/dev/null; then${R}
        ${C}    eval "\$(env klam-ext bash-integration)";${R}
        ${C}fi${R}

${W}Example Configuration:${R}
    
    Config file ~/.klam-ext
    ${C}---${R}
    ${C}CP-DEV:${R}
    ${C}  project:  ${G}CommunityPlatform${R}
    ${C}  env:      ${G}Dev${R}
    ${C}  policy:   ${G}administrator_and_support${R}
    ${C}  mfa:      ${Gr}false${R}
    ${C}  duration: ${Y}28800 ${Gr}# 8h ${R}
    ${C}  ssh-add:  ${Gr}true${R}

    ${C}CP-STAGE:${R}
    ${C}  project:  ${G}CommunityPlatform${R}
    ${C}  env:      ${G}Stage${R}
    ${C}  policy:   ${G}adobecp_read_only${R}
    ${C}  mfa:      ${Gr}true${R}
    ${C}  klam_url: ${G}https://klam-prod.corp.adobe.com${R} # use KLAM v6 site...


${W}Documentation:${R}
    For further documentation and some tips'n'tricks see the latest ${Gr}README${R}.
        ${C}open https://git.corp.adobe.com/KlamExt/klam-ext/#table-of-contents ${R}


HELP
  for HELP_PLATFORM in ${HELP_PLATFORMS:-$PLATFORM}; do
    local FN="${HELP_PLATFORM}-help"
    if [[ "$(type -t $FN)" == "function" ]]; then
      "$FN"
    fi
  done
}
macos-help() {
  cat <<-HELP
${W}Dependencies: [macOS]${R}

    AWS CLI >= ${MIN_VERSION_AWS_CLI}
        The official AWS Command Line Interface
        ${C}sudo pip install --upgrade awscli --ignore-installed six ${R}

    python with yaml module
        ${C}sudo pip install pyyaml ${R}
        If pip is missing, install via ${C}sudo easy_install pip${R}

    jq >= ${MIN_VERSION_JQ}
        a lightweight and flexible command-line JSON processor
        Install via homebrew: ${C}brew install jq${R}
        or ${C}open https://stedolan.github.io/jq/download/ ${R}

HELP
}
linux-help() {
  cat <<-HELP
${W}Dependencies: [linux/ubuntu]${R}

    AWS CLI >= ${MIN_VERSION_AWS_CLI}
        The official AWS Command Line Interface
        ${C}pip install --upgrade awscli --ignore-installed six ${R}

    python with yaml module
        ${C}pip install pyyaml${R}
        If pip is missing, install via ${C}sudo apt install python-pip${R}

    jq >= ${MIN_VERSION_JQ}
        a lightweight and flexible command-line JSON processor
        Install via apt: ${C}sudo apt install jq ${R}
        or ${C}open https://stedolan.github.io/jq/download/ ${R}

    xsel
        a command line clipboard tool
        Install via apt: ${C}sudo apt install xsel ${R}

    xdotool ${Gr}[optional]${R}
        command-line X11 automation tool, which allows klam-ext to switch
        back focus to terminal.
        Install via apt: ${C}sodo apt install xdotool ${R}


HELP
}

VERBOSE=1
ACTION=""
ACTION_ARGS=()
PROFILE=""
COLOR=0
ENV_MODE=0
JSON_MODE=0
FORCE_DEFAULT_DURATION=0
FORCE_FRESH_CREDENTIALS=0
DEDICATED=0
SSH_ADD=""

W=""; Y=""; G=""; C=""; Gr=""; R="";

init-colors() {
  if [[ $COLOR -gt 0 ]]; then 
    W=$'\033[0;1m'; Y=$'\033[0;33m'; G=$'\033[0;32m'; C=$'\033[0;36m'; Gr=$'\033[0;37m'; R=$'\033[0m';
  fi
}

unknown-opt() {
  init-colors
  error "Unknown option: $1"
  usage >&2
  exit 1
}

main () {
  if [[ "$1" == "__actions" ]]; then
    echo "${ACTIONS[@]}"
    exit 1
  fi
  if [[ "$1" == "__options" ]]; then
    # "$2" provides the action...
    echo "${OPTIONS[@]}"
    exit 1
  fi
  if [[ -t 0 && -t 1 && -t 2 && "$TERM" = xterm-*color ]]; then
    COLOR=1
  fi
  local BREAK=0
  until [[ ${#@} -eq 0 || $BREAK -eq 1 ]]; do
    case "$1" in
      -v|-verbose|--verbose)
        VERBOSE=$(( VERBOSE + 1))
        shift
        ;;
      -q|-quiet|--quiet)
        VERBOSE=0
        shift
        ;;
      -nocolor|-no-color|--nocolor|--no-color)
        COLOR=0; shift
        ;;
      -color|--color)
        COLOR=1; shift
        ;;
      -env|--env)
        ENV_MODE=1; shift
        ;;
      -json|--json)
        JSON_MODE=1; shift
        ;;
      -f|-force|--force)
        FORCE_FRESH_CREDENTIALS=1; shift
        ;;
      -1h|--1h|-1H|--1H)
        FORCE_DEFAULT_DURATION=1; shift
        ;;
      -d|-dedicated|--dedicated)
        DEDICATED=1; shift
        ;;
      -ssh-add|--ssh-add)
        SSH_ADD=1; shift
        ;;
      -no-ssh-add|--no-ssh-add)
        SSH_ADD=0; shift
        ;;
      -version|--version)
        ACTION="version"; shift
        ;;
      * )
        if [[ -z "$ACTION" ]]; then 
          case "$1" in
            -h|-help|--help|help)
              ACTION="help"
              shift
              ;;
            version|cfg|profiles|unset|get|getssh|ssh|console|ec2-hosts|spinner|bash-integration)
              ACTION="$1"
              shift
              ;;
            *)
              if [[ -z "$PROFILE" && "$1" != -* ]]; then 
                PROFILE="$1"
                shift
              else
                unknown-opt "$1"
              fi
              ;;
          esac
        else
          case "$ACTION" in
            get|getssh|console)
              if [[ -z "$PROFILE" && "$1" != -*  ]]; then 
                PROFILE="$1"
                shift
              else
                unknown-opt "$1"
              fi
              ;;
            ssh|ec2-hosts)
              if [[ -z "$PROFILE" && -z "$KLAM_PROFILE" && "$1" != -* ]]; then 
                PROFILE="$1"
                shift
              else
                BREAK=1
              fi
              ;;
            *)
              unknown-opt "$1"
              ;;
          esac
        fi
        ;;
    esac
  done

  ACTION_ARGS=( "$@" )
  
  init-colors

  if [[ -z "$ACTION" && -n "$PROFILE" ]]; then
    # klam-ext PROFILE    ==   klam-ext get PROFILE
    ACTION="get"
  elif [[ -z "$PROFILE" && -n "$KLAM_PROFILE" ]]; then
    # assign PROFILE from environment variable
    PROFILE="${KLAM_PROFILE}"
  fi

  if [[ -z "$ACTION" ]]; then
    if [[ ! -t 0 && ! -t 1 ]]; then # STDIN and STDOUT are not a terminal
      ACTION="get"
    fi
    if [[ -z "$ACTION" ]]; then
      error "Missing action."
      usage >&2;
      exit 1
    fi
  fi

  if [[ -z "$PROFILE" ]]; then
    case "$ACTION" in
      get|getssh|console|ec2-hosts)
        if [[ ! -t 0 && ! -t 1 ]]; then # STDIN and STDOUT are not a terminal
          PROFILE="$(platform choose-profile-gui)"
        fi
        if [[ -z "$PROFILE" ]]; then
          error "Missing profile option."
          usage >&2;
          exit 1
        fi
        ;;
    esac
  fi

  klam-ext-"$ACTION" "${ACTION_ARGS[@]}"


}

# Supported Platforms: macos, linux
PLATFORM="$([[ "$(uname -s)" == "Darwin" ]] && echo "macos" || echo "linux")"
platform() {
  local FN=$PLATFORM-$1; shift;
  if [[ "$(type -t $FN)" == "function" ]]; then
    $FN "$@"
  fi
}

# macOS compatibility 
macos-clipboard-clear() { echo | pbcopy; }
macos-clipboard-paste() { pbpaste; }
_APP_ID=""
_WIN_ID=""
macos-open-url-in-browser() {
  local URL="$1"

  debug "Get app and window ids of frontmost application."
  _APP_ID="$(applescript_frontmost_app_id || true)"
  _WIN_ID="$([[ -n "$_APP_ID" ]] && applescript_first_window_of_app "$_APP_ID" || true)"
  debug "app id: $_APP_ID   window id: $_WIN_ID"

  if [[ DEDICATED -eq 1 && "${KLAM_BROWSER:-Google Chrome}" == "Google Chrome" ]]; then
    mkdir -p /tmp/klam-ext
    find /tmp/klam-ext -iname 'chrome-*' -mmin +720 -delete
    local user_dir="/tmp/klam-ext/chrome-$(date +%Y%m%d%H%M%S)"
    mkdir -p "$user_dir"
    
    open -na "Google Chrome" --args "--user-data-dir=$user_dir" --no-default-browser-check --no-first-run "$URL"
  elif [[ DEDICATED -eq 1 ]]; then
    fatal "The --dedicated option is not yet available for ${KLAM_BROWSER}."
  else
    open -a "${KLAM_BROWSER:-Google Chrome}" "$URL"
  fi
}
macos-reactivate-terminal() {
  if [[ -n "$_APP_ID" ]]; then
    debug "Activate app: $_APP_ID   window: $_WIN_ID."
    if [[ -n "$_WIN_ID" ]]; then
      applescript_activate_app_window "$_APP_ID" "$_WIN_ID"
    else
      applescript_activate_app "$_APP_ID"
    fi
  fi
}
macos-install-hint-jq() {
  echo "install via homebrew: brew install jq"
  echo "or download latest version: https://stedolan.github.io/jq/download/"
}
macos-install-hint-pick() {
  echo "install via homebrew: brew install pick"
  echo "or download latest version: https://github.com/mptre/pick"
}
macos-install-hint-pip() {
  echo "install pip: sudo easy_install pip"
}
macos-choose-profile-gui() {
  local OSA_PROFILES_STR=$(klam-ext-cfg | jq 'keys|map(select(.[:1]!="_"))|tojson|.[1:-1]' -r)
  osascript 2>/dev/null -e "choose from list {${OSA_PROFILES_STR}} with prompt \"Select a profile:\"" \
  | grep -v false || true
}

# linux (ubuntu) compatibility
linux-clipboard-clear() { xsel --clipboard --clear; }
linux-clipboard-paste() { xsel --clipboard --output; }
linux-open-url-in-browser() {
  local URL="$1"
  
  if which xdotool >/dev/null 2>&1; then
    debug "Get app name and window id of frontmost application."
    _WIN_ID="$(xdotool getactivewindow)"
    debug "window id: $_WIN_ID"
  fi

  if [[ -n $KLAM_BROWSER ]]; then
    debug "Start KLAM_BROWSER=$KLAM_BROWSER DEDICATED=$DEDICATED"
    DEDICATED=$DEDICATED "$KLAM_BROWSER" "$URL"
  elif [[ DEDICATED -eq 1 && -n "$(which google-chrome 2>/dev/null)" ]]; then
    debug "Start dedicated google-chrome"
    mkdir -p /tmp/klam-ext
    find /tmp/klam-ext -iname 'chrome-*' -mmin +720 -delete
    local user_dir="/tmp/klam-ext/chrome-$(date +%Y%m%d%H%M%S)"
    mkdir -p "$user_dir"
    google-chrome "--user-data-dir=$user_dir" --no-default-browser-check --no-first-run "$URL" \
     >"$user_dir/process.stdout" 2>"$user_dir/process.stderr" &
  elif [[ DEDICATED -eq 1 ]]; then
    fatal "The --dedicated option is only available for 'google-chrome' or when used with KLAM_BROWSER=/path/to/browser-launch-script..."
  else
    debug "Start xdg-open"
    xdg-open "$URL" >/dev/null
  fi
}
linux-reactivate-terminal() {
  if [[ -n "$_WIN_ID" ]] && which xdotool >/dev/null 2>&1; then
    debug "Activate window: $_WIN_ID."
    xdotool windowactivate $_WIN_ID
  else
    info "Hint: You might want to install 'xdotool' to auto-focus back to terminal."
  fi
}
linux-install-hint-jq() {
  echo "install jq via: sudo apt install jq"
  echo "or download latest version: https://stedolan.github.io/jq/download/"
}
linux-install-hint-pick() {
  echo "install pick via: sudo apt install pick"
  echo "or download latest version: https://github.com/mptre/pick"
}
linux-install-hint-pip() {
  echo "install pip: sudo apt install python-pip"
}


check-dependencies() {
  if [[ $PLATFORM == "linux" ]]; then
    if ! which xsel  >/dev/null 2>&1; then
      error "missing xsel, a command line clipboard tool"
      errorhint "install xsel via: sudo apt install xsel"
    fi
    if ! which xdg-open >/dev/null 2>&1; then
      if [[ -z $KLAM_BROWSER ]]; then
        error "missing xdg-open and KLAM_BROWSER is not set"
        errorhint "set KLAM_BROWSER to a command that launches a browser"
      fi
    fi
  fi
  local NEED_PIP=0
  until [[ ${#@} -eq 0 ]]; do
    case "$1" in
      awscli)
        if ! which aws >/dev/null 2>&1; then
          error "missing aws command line tools. "
          errorhint "install awscli via: sudo pip install awscli"
          NEED_PIP=1
        else
          AWSCLI_VERSION="$( (unset AWS_DEFAULT_PROFILE AWS_PROFILE; aws --version 2>&1) | grep -Eo -m 1 '([0-9]+(\.[0-9]+)+)' | head -1)"
          if [[ -z "$AWSCLI_VERSION" ]] || ! version_gte "$AWSCLI_VERSION" "$MIN_VERSION_AWS_CLI"; then
            error "out-dated version of aws-cli ($AWSCLI_VERSION), at least version $MIN_VERSION_AWS_CLI is required"
            errorhint "update awscli via: sudo pip install --upgrade awscli"
          fi
        fi
        ;;
      jq)
        if ! which jq >/dev/null 2>&1; then
          error "missing jq. "
          errorhint "$(platform install-hint-jq)"
        else
          JQ_VERSION_RAW="$(jq --version 2>&1)"
          if [[ "$JQ_VERSION_RAW" != jq-HEAD-* ]]; then
            JQ_VERSION="$(grep <<<"$JQ_VERSION_RAW" -Eo -m 1 '[0-9.]+' | head -1)"
            if [[ -z "$JQ_VERSION" ]] || ! version_gte "$JQ_VERSION" "$MIN_VERSION_JQ"; then
              error "out-dated version of jq ($JQ_VERSION), at least version $MIN_VERSION_JQ is required"
              errorhint "$(platform install-hint-jq)"
            fi
          fi
        fi
        ;;
      pyyaml)
        if ! "${KLAM_PYTHON}" -c 'import yaml' >/dev/null 2>&1; then
          error "missing yaml python module for python:" $(which "${KLAM_PYTHON}")
          errorhint "install yaml module via: sudo pip install pyyaml"
          errorhint "or specify python with pyyaml using environment variable KLAM_PYTHON"
          NEED_PIP=1
        fi
        ;;
    esac
    shift;
  done || true

  if [[ "$ERRORS" -gt 0 ]]; then 
    if [[ $NEED_PIP -eq 1 ]] && ! which pip >/dev/null 2>&1; then
      errorhint "$(platform install-hint-pip)"
    fi
    exit 1
  fi
}


# /**************************************************************/
#
#  Actions
#
# /**************************************************************/

klam-ext-help() {
  help
}

klam-ext-version(){
  echo "klam-ext/${KLAM_EXT_VERSION}"
}

klam-ext-bash-integration() {
  check-dependencies awscli jq pyyaml

  cat <<'SHELL_SCRIPT'
# wrapper to export AWS_PROFILE and AWS_DEFAULT_PROFILE
# when 'klam-ext get PROFILE' is called.
klam-ext() {
  TMPFILE="$(mktemp -t klam-ext-sh.XXXXXXXXXX)"
  KLAM_EXT_SHELL_INT="$TMPFILE" COLUMNS="$COLUMNS" env klam-ext "$@"
  CODE="$?"
  [ -s "$TMPFILE" ] && source "$TMPFILE"
  [ -f "$TMPFILE" ] && \rm "$TMPFILE"
  return $CODE
}
# autocomplete useful commands and profile names
__klam-ext() {
  local cur
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  if [[ $COMP_CWORD -eq 1 ]]; then
      COMPREPLY=( $( compgen -W "$(klam-ext 2>/dev/null __actions) $(klam-ext 2>/dev/null profiles)" -- $cur ) )
  elif [[ $COMP_CWORD -eq 2 && -z "$KLAM_PROFILE" && ( "${COMP_WORDS[1]}" = get* || "${COMP_WORDS[1]}" = console || "${COMP_WORDS[1]}" = ssh || "${COMP_WORDS[1]}" = ec2-hosts ) ]]; then
      COMPREPLY=( $( compgen -W "$(klam-ext 2>/dev/null profiles)" -- $cur ) )
  elif [[ $COMP_CWORD -eq 2 && -n "$KLAM_PROFILE" && "${COMP_WORDS[1]}" = ec2-hosts ]]; then
      COMPREPLY=( $( compgen -W "--region" -- $cur ) )
  elif [[ $COMP_CWORD -eq 3 && -n "$KLAM_PROFILE" && "${COMP_WORDS[1]}" = ec2-hosts && "${COMP_WORDS[2]}" = --region ]]; then
      COMPREPLY=( $( compgen -W "us-east-1 us-west-2 eu-west-1 ap-northeast-1" -- $cur ) )
  else
      COMPREPLY=( $( compgen -W "$(klam-ext 2>/dev/null __options "${COMP_WORDS[1]}")" -- $cur ) )
  fi
  return 0
}
complete -F __klam-ext klam-ext
SHELL_SCRIPT
}

klam-ext-url() {
  klam-ext-cfg | jq -r \
      --arg P "$PROFILE" \
      --arg KLAM_URL "$KLAM_URL" \
      "(.[\$P]//empty | .klam_url // .klamUri // .klamUrl) // \$KLAM_URL | rtrimstr(\"/\")"
}

klam-ext-unset() {
  check-dependencies awscli

  local AWS_PROFILE="$KLAM_EXT_PROFILE_PREFIX$PROFILE"
  local PEM_FILE="$HOME/.ssh/klam.$PROFILE.pem"

  if [[ -n "$KLAM_EXT_SHELL_INT" ]]; then
    (
      echo 'unset KLAM_PROFILE'
      echo 'unset AWS_DEFAULT_PROFILE'
      echo 'unset AWS_PROFILE'
      echo 'unset AWS_ACCESS_KEY_ID'
      echo 'unset AWS_SECRET_ACCESS_KEY'
      echo 'unset AWS_SESSION_TOKEN'
      echo 'unset AWS_SECURITY_TOKEN'
    ) >> "$KLAM_EXT_SHELL_INT"
  fi
  if [[ -f "$PEM_FILE" ]]; then
    rm -f "$PEM_FILE"
  fi
  if [[ -n "$AWS_PROFILE" ]]; then
    aws configure --profile "$AWS_PROFILE" set aws_access_key_id ""
    aws configure --profile "$AWS_PROFILE" set aws_secret_access_key ""
    aws configure --profile "$AWS_PROFILE" set aws_session_token ""
    aws configure --profile "$AWS_PROFILE" set aws_security_token ""
    aws configure --profile "$AWS_PROFILE" set identity_arn ""
    aws configure --profile "$AWS_PROFILE" set expiry_dttm ""
  fi
}

klam-ext-get() {
  check-dependencies awscli jq pyyaml

  local AWS_PROFILE="$KLAM_EXT_PROFILE_PREFIX$PROFILE"
  local EXPIRY_DATE="$(aws configure --profile "$AWS_PROFILE" get expiry_dttm 2>/dev/null )"

  # approx expiry date: current time plus duration minus 1-min rounded to 5 min
  local NEW_EXPIRY_DATE="$(klam-ext-cfg | jq -r --arg H "$FORCE_DEFAULT_DURATION" --arg P "$PROFILE" \
      "if \$H==\"1\" then 3600 else (.[\$P]//empty|.duration)//3600 end | . + now - 60 | .-(.%300) | todate")"
  # echo "EXPIRY_DATE:      $EXPIRY_DATE"
  # echo "NEW_EXPIRY_DATE:  $NEW_EXPIRY_DATE"
  local LAST_STILL_VALID="$(jq -n --arg E "$EXPIRY_DATE" \
      "if \$E == \"\" then false else ((\$E|fromdate) > now) end")"
  # echo "LAST_STILL_VALID: $LAST_STILL_VALID"
  local UPDATED=0
  if [[ "$LAST_STILL_VALID" == "false" || FORCE_FRESH_CREDENTIALS -eq 1 || FORCE_DEFAULT_DURATION -eq 1 || "$ENV_MODE" -eq 1 || "$JSON_MODE" -eq 1 || -n "$_KLAM_EXT_GET_RESULT" ]]; then
    if [[ -z "$_KLAM_EXT_GET_RESULT" ]]; then # might already hav a response from klam-ext-getssh
      _klam-ext-get "get"
    fi
    local CREDENTIALS_JSON="$( echo "$_KLAM_EXT_GET_RESULT" | (jq '.B64_AWS_CREDS ' | base64_decode | jq .) 2>/dev/null)"
    if [[ -z "$CREDENTIALS_JSON" || "$CREDENTIALS_JSON" == "null" ]]; then
      local PASTEBIN_URL="$(echo "$_KLAM_EXT_GET_RESULT" | jq '.PASTEBIN_URL_AWS' -r)"
      if [[ -z "$PASTEBIN_URL" || "$PASTEBIN_URL" == "null" ]]; then
        HINT=""
        if [[ $FORCE_DEFAULT_DURATION -eq 0 ]]; then
          HINT="Want to retry with default (1 hour) duration? ...use -1h option."
        fi
        fatal "Missing B64_AWS_CREDS or PASTEBIN_URL_AWS in response. $HINT"
      fi
      CREDENTIALS_JSON="$(curl -s "${PASTEBIN_URL}")"
    fi

    UPDATED=1
    EXPIRY_DATE="$NEW_EXPIRY_DATE"
    export AWS_ACCESS_KEY_ID="$(echo "$CREDENTIALS_JSON" | jq '.AWS_ACCESS_KEY_ID' -r)"
    export AWS_SECRET_ACCESS_KEY="$(echo "$CREDENTIALS_JSON" | jq '.AWS_SECRET_ACCESS_KEY' -r)"
    export AWS_SESSION_TOKEN="$(echo "$CREDENTIALS_JSON" | jq '.AWS_SESSION_TOKEN' -r)"
    IDENTITY_ARN="$( (unset AWS_DEFAULT_PROFILE AWS_PROFILE AWS_SECURITY_TOKEN; aws sts get-caller-identity --query 'Arn' --output text) )"
  else
    export AWS_ACCESS_KEY_ID="$(aws configure --profile "$AWS_PROFILE" get aws_access_key_id 2>/dev/null )"
    export AWS_SECRET_ACCESS_KEY="$(aws configure --profile "$AWS_PROFILE" get aws_secret_access_key 2>/dev/null )"
    export AWS_SESSION_TOKEN="$(aws configure --profile "$AWS_PROFILE" get aws_session_token 2>/dev/null )"
    IDENTITY_ARN="$(aws configure --profile "$AWS_PROFILE" get identity_arn 2>/dev/null )"
  fi

  if [[ -n "$KLAM_EXT_SHELL_INT" ]]; then
    printf 'export %s="%s"\n' KLAM_PROFILE "$PROFILE" \
      >> "$KLAM_EXT_SHELL_INT"
  fi
  if [[ -n "$AWS_ACCESS_KEY_ID" && "$ENV_MODE" -eq 1 ]]; then
    (
      echo 'unset AWS_DEFAULT_PROFILE'
      echo 'unset AWS_PROFILE'
      printf 'export %s="%s"\n' AWS_ACCESS_KEY_ID "$AWS_ACCESS_KEY_ID" \
                                AWS_SECRET_ACCESS_KEY "$AWS_SECRET_ACCESS_KEY" \
                                AWS_SESSION_TOKEN "$AWS_SESSION_TOKEN" \
                                AWS_SECURITY_TOKEN "$AWS_SESSION_TOKEN"
    ) | (
      info "AWS Credentials in use: $IDENTITY_ARN"
      info "These should be valid until $(dttmUTC2Local "$EXPIRY_DATE"), which is $(dttmUTC2Relative "$EXPIRY_DATE" | xargs echo)."
      if [[ -n "$KLAM_EXT_SHELL_INT" ]]; then
        cat >> "$KLAM_EXT_SHELL_INT"
      else
        cat
      fi
    )
    unset AWS_DEFAULT_PROFILE
    unset AWS_PROFILE
    export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    export AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN"
  elif [[ -n "$AWS_ACCESS_KEY_ID" && "$JSON_MODE" -eq 1 ]]; then
    echo "$PASTEBIN_RESULT"
  elif [[ -n "$AWS_ACCESS_KEY_ID" ]]; then
    if (( UPDATED == 1 )); then
      aws configure --profile "$AWS_PROFILE" set aws_access_key_id "$AWS_ACCESS_KEY_ID"
      aws configure --profile "$AWS_PROFILE" set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
      aws configure --profile "$AWS_PROFILE" set aws_session_token "$AWS_SESSION_TOKEN"
      aws configure --profile "$AWS_PROFILE" set aws_security_token "$AWS_SESSION_TOKEN"
      aws configure --profile "$AWS_PROFILE" set identity_arn "$IDENTITY_ARN"
      aws configure --profile "$AWS_PROFILE" set expiry_dttm "$EXPIRY_DATE"
    fi
    info "AWS Credentials in use: $IDENTITY_ARN"
    info "These should be valid until $(dttmUTC2Local "$EXPIRY_DATE"), which is $(dttmUTC2Relative "$EXPIRY_DATE" | xargs echo)."
    if [[ "$FORCE_DEFAULT_DURATION" -eq 0 && "$IDENTITY_ARN" == *federated-user* ]]; then
      local POLICY="$(klam-ext-cfg | jq -r --arg P "$PROFILE" ".[\$P]//empty|.policy")"
      if [[ "$POLICY" == *admin* ]]; then
        warning "WARNING: These credentials were generated with GetFederationToken and"
        warning "  are NOT ALLOWED to make any IAM calls. You can use the --1h option to"
        warning "  force Klam to use AssumeRole or just drop the duration from the config."
      fi
    fi
    if [[ -n "$KLAM_EXT_SHELL_INT" ]]; then
      (
      printf 'export %s="%s"\n' AWS_DEFAULT_PROFILE "$AWS_PROFILE"
      printf 'export %s="%s"\n' AWS_PROFILE "$AWS_PROFILE"
      ) >> "$KLAM_EXT_SHELL_INT"
    else
      info "AWS Credentials stored locally. Use AWS_PROFILE=$AWS_PROFILE to use them."
    fi
    [ -z "$AWS_ACCESS_KEY_ID" ] || unset AWS_ACCESS_KEY_ID
    [ -z "$AWS_SECRET_ACCESS_KEY" ] || unset AWS_SECRET_ACCESS_KEY
    [ -z "$AWS_SESSION_TOKEN" ] || unset AWS_SESSION_TOKEN
    [ -z "$AWS_SECURITY_TOKEN" ] || unset AWS_SECURITY_TOKEN
    export AWS_DEFAULT_PROFILE="$AWS_PROFILE"
    export AWS_PROFILE="$AWS_PROFILE"
    echo "$AWS_PROFILE"
  else
    error "Failed to get credentials. See response below:"
    echo >&2 "$PASTEBIN_RESULT"
    exit 1
  fi
}

klam-ext-getssh() {
  check-dependencies jq pyyaml
  klam-ext-ssh-out
  _klam-ext-get "getssh"
  local PASTEBIN_URL_SSH="$(echo "$_KLAM_EXT_GET_RESULT" | jq '.PASTEBIN_URL_SSH // ""' -r)"
  local PASTEBIN_URL_AWS="$(echo "$_KLAM_EXT_GET_RESULT" | jq '.PASTEBIN_URL_AWS // ""' -r)"
  if [[ -z "$PASTEBIN_URL_SSH" ]]; then
    HINT=""
    if [[ $FORCE_DEFAULT_DURATION -eq 0 ]]; then
      HINT="Want to retry with default (1 hour) duration? ...use -1h option."
    fi
    fatal "Missing PASTEBIN_URL_SSH in response. $HINT"
  fi
  PASTEBIN_RESULT="$(curl -s "${PASTEBIN_URL_SSH}")"
  if echo "$PASTEBIN_RESULT" | grep 'PRIVATE KEY' >/dev/null 2>&1; then
    local PEM_FILE="$HOME/.ssh/klam.$PROFILE.pem"
    local PEM_DIR="$(dirname "$PEM_FILE")"

    [[ -d "$PEM_DIR" ]] || mkdir -p "$PEM_DIR"
    [[ ! -f "$PEM_FILE" ]] || rm -f "$PEM_FILE"
    echo "$PASTEBIN_RESULT" > "$PEM_FILE"
    chmod 0400 "$PEM_FILE"

    info "Private Key retrieved."
    echo "$PEM_FILE"
    SSH_ADD="${SSH_ADD:-$(klam-ext-cfg | jq -r --arg P "$PROFILE" ".[\$P]//{}|if .[\"ssh-add\"] then 1 else 0 end")}"
    if [ "$SSH_ADD" -eq 1 ]; then
      if ssh-add "$PEM_FILE"; then
        info "Added $PEM_FILE to ssh-agent with ssh-add"
    else
        warn "Failed to add $PEM_FILE to ssh-agent with ssh-add"
      fi
    fi
    if [[ ! -z "$PASTEBIN_URL_AWS" ]]; then
      klam-ext-get
    fi
  else
    error "Failed to get private key. See response below:"
    echo >&2 "$PASTEBIN_RESULT"
    return 1
  fi
}


_klam-ext-get() {
  _KLAM_EXT_GET_RESULT=""

  local TYPE="$1"

  local PROFILE_JSON
  local PROFILE_MFA
  local QUERY
  local REPLY_ID
  local REPLY
  local URL
  local APP_NAME
  local WIN_ID
  local TOKEN

  PROFILE_JSON="$(klam-ext-cfg | jq --arg P "$PROFILE" ".[\$P]//empty")"
  if [[ -z "$PROFILE_JSON" ]]; then
    fatal "Invalid profile: $PROFILE"
  fi

  PROFILE_MFA="$(echo "$PROFILE_JSON" | jq 'if .mfa then 1 else 0 end')"
  if [[ "$KLAM_MFA_ENABLED" || PROFILE_MFA -eq 1 ]]; then
    echo >&2 -n "Enter your MFA token: "
    read TOKEN
  fi

  QUERY="$(echo "$PROFILE_JSON" | jq -r --arg T "$TYPE" --arg H "$FORCE_DEFAULT_DURATION" "
    {
      project_name:     .project,
      project_env:      .env,
      my_policy:        .policy,
      projectDuration:  (if \$H==\"1\" then \"default\" else (.duration//\"default\"|tostring) end),
      projectSshPolicy: (.ssh//1|tostring),
      projectMfa:       \"${TOKEN}\",
    } | to_entries | map([.key,\"=\",(.value|@uri)]|add) | join(\"&\")
  ")"

  REPLY_ID="$(uuid)"
  REPLY=""
  URL="$(klam-ext-url)/#klam-ext:${TYPE}:${REPLY_ID}:${QUERY}"

  debug "Open URL:" "$URL"
  platform open-url-in-browser "$URL"

  debug "Check clipboard for:" "#klam-ext:reply:$REPLY_ID:"
  spinner-start "Wait for reply..."
  while [[ -z "$REPLY" ]]; do
    REPLY="$(check-clipboard-for-reply "$REPLY_ID")"
    spinner-progress
    sleep .3
  done
  spinner-end

  platform reactivate-terminal || true

  if [[ -z "$REPLY" ]]; then 
    fatal 'no reply. timeout.'
  fi

  debug "clear clipboard"
  platform clipboard-clear || true

  _KLAM_EXT_GET_RESULT="$REPLY"

  debug "output reply"
  if [[ $VERBOSE -gt 1 ]]; then
    debug "${REPLY}"
  fi

}

check-clipboard-for-reply() {
  local OUT
  OUT="$(platform clipboard-paste)"
  echo "$OUT" \
   | head -1 \
   | grep -E '^#klam-ext:reply:'"$REPLY_ID"':' >/dev/null 2>&1 \
  && (echo "$OUT" | awk 'NR>1') || true
}

klam-ext-console() {
  PROFILE_JSON="$(klam-ext-cfg | jq --arg P "$PROFILE" ".[\$P]//empty")"
  if [[ -z "$PROFILE_JSON" ]]; then
    fatal "Invalid profile: $PROFILE"
  fi
  local URL="$(klam-ext-url)"
  if [[ $URL == *klam-sj* || $URL == *klam-ue1* ]]; then
    # OLD KLAM
    QUERY="$(echo "$PROFILE_JSON" | jq -r "
      {
        project_name: .project,
        project_env:  .env,
        my_policy:    .policy,
        request:      \"console\",
      } | to_entries | map([.key,\"=\",.value]|add) | join(\"&\") 
    ")"
    URL="${URL}/api/aws.php?${QUERY}"
  else
    # new KLAM
    QUERY="$(echo "$PROFILE_JSON" | jq -r "
      {
        project:     .project,
        environment: .env,
        policy_name: .policy,
        duration:    (.duration//3600 | . / 3600 | floor | tostring)
      } | to_entries | map([.key,\"=\",.value]|add) | join(\"&\") 
    ")"
    URL="${URL}/aws_console?${QUERY}"
  fi
  debug "open URL: $URL"
  platform open-url-in-browser "$URL"
}

_KLAM_EXT_LOAD_CREDS_WHEN_AVAIL=0
_klam-ext-load-credentials-when-available() {
  if [[ _KLAM_EXT_LOAD_CREDS_WHEN_AVAIL -eq 0 ]]; then
    _KLAM_EXT_LOAD_CREDS_WHEN_AVAIL=1
    if [[ -z "$AWS_ACCESS_KEY_ID" ]]; then
      if [[ -n "$PROFILE" ]]; then
        local AWS_PROFILE="$KLAM_EXT_PROFILE_PREFIX$PROFILE"
        if ! AWS_PROFILE="$AWS_PROFILE" AWS_DEFAULT_PROFILE="$AWS_PROFILE" aws sts get-caller-identity 2>/dev/null >/dev/null; then
          klam-ext-get >/dev/null
        else
          export AWS_PROFILE="$AWS_PROFILE"
          export AWS_DEFAULT_PROFILE="$AWS_PROFILE"
        fi
      fi
    fi
  fi
}

_ADOBE_SSH_OUT_URL=""
_ADOBE_SSH_OUT_DELAY=""
_ADOBE_SSH_OUT_PATTERN=""
klam-ext-ssh-out-init() {
  if [[ -z "${KLAM_EXT_NO_SSH_OUT}" ]]; then
    _ADOBE_SSH_OUT_URL="${ADOBE_SSH_OUT_URL:-http://global-ssh-out.adobe.com/}"
    _ADOBE_SSH_OUT_DELAY="${ADOBE_SSH_OUT_DELAY:-1s}"
    _ADOBE_SSH_OUT_PATTERN="${ADOBE_SSH_OUT_PATTERN:-WebAuth Successful}"
  fi
}
klam-ext-ssh-out-ok() {
    curl -sLm2 "${_ADOBE_SSH_OUT_URL}" -H 'Connection: close' 2>/dev/null | grep -q "${_ADOBE_SSH_OUT_PATTERN}";
}
klam-ext-ssh-out() {
  klam-ext-ssh-out-init
  if [[ -n "${_ADOBE_SSH_OUT_URL}" &&  -n "${_ADOBE_SSH_OUT_PATTERN}" ]]; then
    debug "Checking SSH-OUT... URL: ${_ADOBE_SSH_OUT_URL}   PATTERN: ${_ADOBE_SSH_OUT_PATTERN}"
    if ! klam-ext-ssh-out-ok; then
      debug "Need to SSH-OUT."
      
      if [[ -n "$_ADOBE_SSH_OUT_DELAY" ]]; then
        debug "Need to delay by $_ADOBE_SSH_OUT_DELAY..."
        sleep "$_ADOBE_SSH_OUT_DELAY"
      fi

      debug "Open URL:" "${_ADOBE_SSH_OUT_URL}"
      platform open-url-in-browser "${_ADOBE_SSH_OUT_URL}"

      spinner-start "Wait for ssh-out..."
      while ! klam-ext-ssh-out-ok; do
        spinner-progress
        sleep .3
      done
      spinner-end

      platform reactivate-terminal || true
      sleep .3
    fi
  else
    debug "Skip SSH-OUT check... missing ADOBE_SSH_OUT_URL and ADOBE_SSH_OUT_PATTERN envs."
  fi
}


klam-ext-ssh() {
  local PEM_FILE="$HOME/.ssh/klam.$PROFILE.pem"
  local SSH_HOST="$1"
  MAX_DURATION_MINUTES=$(klam-ext-cfg | jq --arg P "$PROFILE" "(.[\$P]//empty|.duration)//3600|. * 0.8 / 60")
  if [[ ! -f "$PEM_FILE" || FORCE_FRESH_CREDENTIALS -eq 1 || -z "$(find "$PEM_FILE" -mmin -${MAX_DURATION_MINUTES} -print)" ]]; then
    klam-ext-getssh >&2
  fi
  if [[ -z "$SSH_HOST" || "$SSH_HOST" = -* ]]; then
    if type pick >/dev/null 2>/dev/null; then
      _klam-ext-load-credentials-when-available
      local EC2_HOSTS="$(klam-ext-ec2-hosts)"
      if [[ -n "$EC2_HOSTS" ]]; then
        info "Pick an EC2 Instance: (CTRL-c to abort)"
        local PICK=($(echo "$EC2_HOSTS" | pick -X | tee /dev/stderr))
        if [[ "${PICK[1]}" == *internal ]]; then
          SSH_HOST="${PICK[0]}"
        else
          SSH_HOST="${PICK[1]}"
        fi
      fi
    else
      error "Missing pick executable. (allows to interactively select the host you like to connect to)"
      errorhint "$(platform install-hint-pick)"
    fi
    if [[ -z "$SSH_HOST" || "$SSH_HOST" = -* ]]; then
      fatal "missing HOST or INSTANCE_ID parameter"
    fi
  fi
  if [[ "$SSH_HOST" == "$1" ]]; then
    shift;
  fi
  if [[ "$SSH_HOST" = i-* ]]; then
    _klam-ext-load-credentials-when-available
    if [[ "$AWS_PROFILE" != "$KLAM_EXT_PROFILE_PREFIX$PROFILE" ]]; then
      echo >&2 "klam-ext-ssh: AWS_PROFILE = $AWS_PROFILE"
      echo >&2 "klam-ext-ssh: PROFILE = $PROFILE"
      fatal "missing AWS credentials. Needed to resolve hostname for Instance ID."
    fi
    SSH_HOST="$( klam-ext-ec2-hosts --instance-id "$SSH_HOST" ) | tee /dev/stderr | awk '{print $2}')"
    if [[ -z "$SSH_HOST" ]]; then
      fatal "Failed to resolve hostname for Instance ID. Is it running?"
    fi
  fi
  if [[ ! -f "$PEM_FILE" ]]; then
    fatal "Still missing $PEM_FILE"
  fi
  ssh -o IdentitiesOnly=yes -i "$PEM_FILE" -l "$(whoami)" "$SSH_HOST" "$@"
}

klam-ext-ec2-hosts() {
  _klam-ext-load-credentials-when-available
  AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-$(aws configure get region 2>/dev/null || true )}"
  export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-us-east-1}"
  aws ec2 describe-instances "$@" \
    --filters Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped \
    --output json \
  | jq '[.Reservations[].Instances[] | {
      InstanceId,
      PublicDnsName,
      PublicIpAddress,
      PrivateIpAddress,
      PrivateDnsName,
      KeyName,
      AvailabilityZone:.Placement.AvailabilityZone,
      State:.State.Name,
      Tags: ((.Tags//[])|map({key:.Key,value:.Value})|sort_by(.key)|from_entries)
    }] 
    | sort_by([.Tags.ethos_role,.Tags.Name,.PublicIpAddress,.PrivateIpAddress])
    | .[]' \
  | if [ "$JSON_MODE" -eq 1 ]; then
      jq -c '.'
    else
      jq -r '
        def firstNonEmpty: map(select(length>0))|.[0];
        [
          ([.PublicIpAddress, .PrivateIpAddress]|firstNonEmpty//" "),
          ([.PublicDnsName, .PrivateDnsName]|firstNonEmpty//" "),
          "#",
          if .Tags.ethos_role then "\(.Tags.ethos_role): \(.Tags.Name)" else (.Tags.Name//"Unnamed") end,
          .AvailabilityZone//" ",
          .InstanceId//" ",
          .State//" ",
          .KeyName//" "
        ] | join("\t")' \
        | column -ts$'\t' \
        | if [[ -t 1 && "${COLUMNS:-0}" -gt 0 ]]; then
          cut -c -$COLUMNS
        else
          cat
        fi
    fi
}


klam-ext-profiles() {
  check-dependencies jq
  klam-ext-cfg | jq 'keys[]' -r
}

klam-ext-cfg() {
  check-dependencies jq pyyaml
  if [[ -d "$KLAM_EXT_YML" ]]; then
    fatal "Configuration error: $KLAM_EXT_YML needs to be a yaml file, not a folder."
  elif [[ -s "$KLAM_EXT_YML" ]]; then
    (yml2json < "$KLAM_EXT_YML") 2>/dev/null || fatal "Configuration error: $KLAM_EXT_YML invalid."
  else
    fatal "Configuration error: $KLAM_EXT_YML missing."
  fi
}

klam-ext-spinner() {
  spinner-start "Wait for reply"
  local i
  for (( i = 0; i < 15; i++ )); do
    spinner-progress
    sleep .3
  done
  spinner-end
  echo "DONE"
}

# /**************************************************************/
#
#  Wrapper...
#
# /**************************************************************/

aws_bin="$(which aws 2>/dev/null || echo aws)"
aws() {
  debug "CALL: ${Gr}aws $(printf "%q " "$@")"
  "$aws_bin" "$@"   
}

ssh_bin="$(which ssh 2>/dev/null || echo ssh)"
ssh() {
  debug "CALL: ${Gr}ssh $(printf "%q " "$@")"
  "$ssh_bin" "$@"   
}

open_bin="$(which open 2>/dev/null || echo open)"
open() {
  debug "CALL: ${Gr}open $(printf "%q " "$@")"
  "$open_bin" "$@"   
}

osascript_bin="$(which osascript 2>/dev/null || echo osascript)"
osascript() {
  debug "CALL: ${Gr}osascript $(printf "%q " "$@")"
  "$osascript_bin" "$@"   
}

# /**************************************************************/
#
#  Progress animation...
#
# /**************************************************************/

SPINNER_TITLE=""
SPINNER_TICK=0
SPINNER_FRAMES="⢌⠙⢬⠞⡺⣝⣟⣽⣫⢝⡱⡊"
spinner-start() {
  if [[ $VERBOSE -gt 0 ]]; then
    SPINNER_TITLE="$1"
  fi
}
spinner-end() {
  if [[ $VERBOSE -gt 0 ]]; then
    echo -n >&2 $'\r\033[K'
  fi
}
spinner-progress() {
  if [[ $VERBOSE -gt 0 ]]; then
    local i="$SPINNER_TICK"
    local m="${#SPINNER_FRAMES}"
    SPINNER_TICK=$((i+1%m))
    echo -n >&2 $'\r\033[K\033[36;1m'"${SPINNER_FRAMES:$(((i+1)%m)):1}${SPINNER_FRAMES:$(((i+2)%m)):1}${SPINNER_FRAMES:$(((i+3)%m)):1} "$'\033[0;36m'"$SPINNER_TITLE "$'\033[0m'
  fi
}

# /**************************************************************/
#
#  Utils
#
# /**************************************************************/

dttmUTC2Local() {
  if date --version 2>/dev/null | grep -q 'GNU'; then
    date -d "$1" "+%Y-%m-%d %H:%M"
  else
    date -jf "%Y-%m-%dT%H:%M:%SZ %z" "$1 +0000" "+%Y-%m-%d %H:%M"
  fi
}

dttmUTC2time() {
  TZ=utc jq -n --arg D "$1" "\$D | fromdate"
}

dttmUTC2Relative() {
  timeToRelative "$(dttmUTC2time "$1")"
}

timeToRelative() {
  local T="$(TZ=utc jq -n --arg T "$1" "\$T | tonumber - now | floor")"
  if [[ "$T" -le 0 ]]; then
    printf 'already due'
  else
    local D=$((T/60/60/24))
    local H=$((T/60/60%24))
    local M=$((T/60%60))
    #local S=$((T%60))
    printf 'in '
    (( $D > 1 )) && printf '%d days ' $D
    (( $D == 1 )) && printf '%d day ' $D
    (( $H > 1 )) && printf '%d hours ' $H
    (( $H == 1 )) && printf '%d hour ' $H
    (( $M > 1 )) && printf '%d minutes ' $M
    (( $M == 1 )) && printf '%d minute ' $M
    (( $D > 0 || $H > 0 || $M > 0 )) || printf 'less then a minute '
  fi
}

uuid() {
  "${KLAM_PYTHON}" -c 'import uuid; print(uuid.uuid4());'
}

yml2json() {
  "${KLAM_PYTHON}" -c 'import sys,json,yaml;json.dump(yaml.safe_load(sys.stdin),sys.stdout,ensure_ascii=False,indent=2)'
}

version_gte() {
  # returns exit code 0 if first arg is greater than or equal to the second, otherwise exit code 1.
  "${KLAM_PYTHON}" -c 'import sys;from distutils.version import StrictVersion;sys.exit(int( False == (StrictVersion(sys.argv[1]) >= StrictVersion(sys.argv[2]))));' "$1" "$2"
}

base64_decode() {
  "${KLAM_PYTHON}" -m base64 -d
}

applescript_frontmost_app_id() {
  osascript 2>/dev/null -e "tell app \"System Events\" to return bundle identifier of first process whose frontmost=true"
}

applescript_first_window_of_app() {
  osascript 2>/dev/null -e "tell app id \"$1\" to return id of window 1"
}

applescript_activate_app_window() {
  osascript >/dev/null 2>&1 -e "tell app id \"$1\" to activate window \"$2\""
}

applescript_activate_app() {
  osascript >/dev/null 2>&1 -e "tell app id \"$1\" to activate"
}

exec 3>&2
log() {
  echo >&3 "$@"
}

debug() {
  [[ $VERBOSE -ge 2 ]] && log $'\033[33m'"Debug:" "$@" $'\033[0m' || true
}

info() {
  [[ $VERBOSE -ge 1 ]] && log $'\033[36m' "$@" $'\033[0m' || true
}

warning() {
  [[ $VERBOSE -ge 0 ]] && log $'\033[31m' "$@" $'\033[0m' || true
}

errorhint() {
  info "     " "$@"
}

ERRORS=0
error() {
  [[ $VERBOSE -gt 0 ]] && log "Error:" "$@" || true
  ERRORS=$(( ERRORS + 1 ))
}

fatal() {
  [[ $VERBOSE -gt 0 ]] && log "Fatal:" "$@" || true
  exit 1
}



main "$@"
