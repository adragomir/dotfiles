#!/usr/bin/env ruby
#
require 'find'
require 'yaml'
$s = ARGV[0] || Dir.pwd 

#$yp = __FILE__.gsub(/\/[^\/]*$/, "/") + "svnup.yaml"
#$st = File.open( $yp, "rb+" ) { |yf| YAML::load( yf ) } || {}

actions = {
    '.svn' => proc { |path|
        Dir.chdir(path) do
            puts("  current dir: " + Dir.pwd)
            system("svn up")
        end
    }, 
    'CVS' => proc { |path|
        Dir.chdir(path) do
            puts("  current dir: " + Dir.pwd)
            # cvs params
            contents = IO.read(path + "/CVS/Root").gsub(/[\r\n]/, "")
            system("cvs -d#{contents} up")
        end
    }, 
    '_darcs' => proc { |path|
        Dir.chdir(path) do
            puts("  current dir: " + Dir.pwd)
            system("darcs pull")
        end
    }, 
    '.hg' => proc { |path|
        Dir.chdir(path) do
            puts("  current dir: " + Dir.pwd)
            system("hg pull")
            system("hg update")
        end
    }, 
    '.bzr' => proc { |path|
        Dir.chdir(path) do
            puts("  current dir: " + Dir.pwd)
            #system("hg pull")
            #system("hg update")
        end
    }, 
    '.git' => proc { |path|
        Dir.chdir(path) do
            puts("  current dir: " + Dir.pwd)
            system("git pull")
            #system("hg update")
        end
    } 
}

#def add_or_replace_flag(folder)
    #$st[folder] = Time.now
    #File.open( $yp, "wb+" ) { |yf| yf.write($st.to_yaml) }
#end


Find.find($s) { |path|
    if FileTest.directory?(path)
        active_hash = nil
        has_source_control = %w(.svn CVS _darcs .hg .git .bzr).inject(false) { |memo, val|
            path_scm = path + "/" + val
            is_dir = File.directory?(path_scm)
            memo = memo || is_dir
            if is_dir
                active_hash = actions[val]
            end
            memo
        }
        if has_source_control
            #mins = (Time.now - ($st[path] || Time.mktime(1970, 1, 1))) / 60
            if 1
                puts "Found #{actions.key(active_hash)} source control in " + path
                active_hash.call(path)
                #add_or_replace_flag(path)
            else 
                puts "too soon for " + path
            end
            Find.prune       # Don't look any further into this directory.
        else
            next
        end
        else
    end
}
exit


