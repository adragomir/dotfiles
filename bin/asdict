#!/usr/bin/env python

"""asdict -- interactive application dictionary viewer/exporter

Copyright (C) 2007 HAS <http://appscript.sourceforge.net>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

__version__ = '0.9.0'


_prefsdomain = 'net.sourceforge.appscript.asdict'
_supportapp = 'net.sourceforge.appscript.asdictionary'

from commands import getstatusoutput, getoutput
from sys import argv, stderr, exit
import os, MacOS, struct, time, traceback

try:
	import readline
except:
	pass

import textwrap

from getopt import getopt
from Carbon import AE

_addressDesc = AE.AECreateDesc('bund', _supportapp)

#######

_styles = {
		'as': 'applescript',
		'objc': 'objc-appscript',
		'py': 'py-appscript',
		'rb': 'rb-appscript',
		'applescript': 'applescript',
		'objc-appscript': 'objc-appscript',
		'py-appscript': 'py-appscript',
		'rb-appscript': 'rb-appscript',
		}

#######

_viewerhelp = """    Viewer Options

    The following viewer options are used to display dictionary information
    in both interactive and non- interactive modes:

    -o                            overview of all suites, classes and 
                                  commands

    -k                            list built-in keywords (type names)
    
    -u [suite-name]               summary of the specified suite (default is
                                  all suites)

    -t [class-or-command-name]    terminology for the specified class/command
                                  (default is application)

    -i [class-name]               inheritance tree for the specified class
                                  (default is all classes)

    -r [class-name]               Apple Event Object Model relationships for 
                                  the specified class (default is application)

    Arguments are optional.
    
    In non-interactive mode, if no options are given then the -o option is 
    used.
    
    Each option and argument must be separated by whitespace.

    In a relationships graph (see '-r' option):
    
    *    one-to-one relationships are shown as '-PROPERTY_NAME <CLASS>'
    *    one-to-many relationships are shown as '=ELEMENT_NAME'
    *    a trailing arrow, '->', indicates where deeper relationships exist.
    
    Viewer Commands
    
    The interactive viewer also accepts the following control commands
    (acceptable abbreviations are shown in parentheses):
    
    default NAME [VALUE]    (d)     get/set a default setting
    
    exit                    (e)     exit interactive viewer
    
    help                    (h)     print viewer options
    
    show all                (sa)    show all suites, classes and commands
    
    show hidden             (sh)    show hidden suites, classes and commands
                                    only
    
    show visible            (sv)    show visible suites, classes and commands
                                    only (default is show visible)

    The following defaults are currently supported:
    
    *    style [formatting style, e.g. py-appscript]
    *    wrap [max number of characters per line, e.g. 78]
    
    Changes to default settings will take effect the next time asdict is run.
"""


_generalhelp = """NAME

    asdict -- interactive application dictionary viewer/exporter

SYNOPSIS

    asdict -H [ -a ] [ -c ] [ -s style ] app-or-osax-name

    asdict -T [ -s style ] app-or-osax-name

    asdict [ -N ] [ -s style ] app-name [ viewer-options ]
    
    asdict [ -h ] [ -v ]


DESCRIPTION

    asdict provides options for viewing and exporting scriptable application
    dictionaries. It has three operating modes:
    
    *    interactive viewer
    *    non-interactive viewer
    *    plain text/HTML exporter
    
   Command Options

    The following options are available:
    
    -H         export dictionary as single HTML file
    
    -T         export dictionary as plain text file
    
    -N         run viewer in non-interactive mode

    -a         when used with -H option, also shows any hidden suites,
               classes and commands in addition to visible ones
    
    -c         when used with -H option, collapses identically named classes
               that appear in multiple suites into a single definition
    
    -h         show this help, then exit
    
    -v         show version number, then exit
    
    -s name    output style (default is py-appscript):

    The -s option currently supports the following formatting styles
    (acceptable abbreviations are shown in parentheses):
    
    *    applescript       (as)
    *    objc-appscript    (objc)
    *    py-appscript      (py)
    *    rb-appscript      (rb)
    
    The -H, -T and -N options are mutually exclusive. If none of these
    options is given, the viewer runs in interactive mode (the default).
    
    The -H and -T export options may be used to export both application and 
    scripting addition dictionaries. The interactive and non-interactive 
    viewer modes currently support applications only.
    
""" + _viewerhelp + """

EXAMPLES

    asdict -N Finder -o -k -i file -i folder
    
    asdict -cH TextEdit.app > TextEdit.html
    
    asdict -s rb eppc://remote-mac.local/iCal
    iCal> -u
    iCal> -t view_calendar
    iCal> -t calendar -i calendar -r calendar
    
    asdict Finder
    Finder> default style
    py-appscript
    Finder> default style rb-appscript
    Finder> default wrap 140
    Finder> exit
"""

#######

def getpref(name, default):
	err, val = getstatusoutput("defaults read %s %s" % (_prefsdomain, name))
	if err:
		err, val = getstatusoutput("defaults write %s %s '%s'" % (_prefsdomain, name, default))
		if err:
			print >> stderr, "Can't read/write defaults: %s (%r)" % (val, err)
		return default
	return val


def setpref(name, val):
	err, val = getstatusoutput("defaults write %s %s '%s'" % (_prefsdomain, name, val))
	if err:
		print >> stderr, "Can't read/write defaults: %s (%r)" % (val, err)


#######

_defaultstyle = 'py-appscript'
_defaultwrap = 78

try:
	wrap = int(getpref('wrap', _defaultwrap))
except:
	print >> stderr, "Bad wrap value: %s; using default instead." % getpref('wrap', _defaultwrap)
	wrap = _defaultwrap

class _Out:
	"""Outputs lines wrapped to fit in (by default) 80 column terminal window."""
	
	def __init__(self, width=wrap):
		self._textwrapper = textwrap.TextWrapper(width=width, subsequent_indent=' ' * 12)
	
	def write(self, s):
		if s == '\n':
			print
		elif '\n' in s:
			lst = s.split('\n')
			for para in lst[:-1]:
				self.write(para)
				self.write('\n')
			self.write(lst[-1])
		else:
			print self._textwrapper.fill(s),

_out = _Out()


#######


def ensureasdictionary():
	# Launch ASDictionary if it isn't already running
	# Bit kludgy, since we want to keep ASDictionary hidden, or at least not bring it to front, if it wasn't previously running
	# while using only 'open' to launch it (can't use LaunchServices since it isn't included in 10.3/10.4's default Python
	# and definitely can't use AppleScript to launch it as AS can't use bundle ID in 10.3/10.4 so has to rely on less
	# reliable filename, and will display annoying 'Where is application...?' dialogs if ASDictionary isn't found.
	isrunning = getoutput("""osascript -e 'tell application "System Events" to exists process "ASDictionary" ' """) == 'true'
	if not isrunning:
		errn = os.system('open -b ' + _supportapp)
		print errn
		if errn:
			exit("Can't open ASDictionary (error %i). You may need to install it or launch it manually. See <http://appscript.sourceforge.net>." % errn)
		print os.system("""osascript -e 'tell app "System Events" to set visible of process "ASDictionary" to false' """)


#######


def doevent(eventid, **args):
	# print 'DOEVENT', eventid # DEBUG
	# pack event
	evt = AE.AECreateAppleEvent('ASDi', eventid, _addressDesc, -1, 0)
	for key, val in args.items():
		evt.AEPutParamDesc(key, AE.AECreateDesc('utf8', val))
	# send event
	try:
		reply = evt.AESend(3, 0, -1)
	except MacOS.Error, err:
		print 'err', err
		if err[0] in [-600, -609]:
			exit('Error: ASDictionary has quit or relaunched since asdict was started. Please re-run asdict to continue.')
		else:
			exit('An unexpected error occurred when contacting ASDictionary: %i' % err[0])
	# handle error if given
	try:
		err = struct.unpack('l', reply.AEGetParamDesc('errn', 'long').data)[0]
		if err != -128:
			print >> stderr, 'An unexpected error occurred in ASDictionary: %i' % err
			try:
				print >> stderr, reply.AEGetParamDesc('errs', 'utf8').data
			except MacOS.Error:
				pass
			traceback.print_stack(None, 20, stderr)
			exit(1)
		exit()
	except MacOS.Error:
		pass
	# return result if given
	try:
		return reply.AEGetParamDesc('----', 'utf8').data
	except MacOS.Error:
		pass


#######
# parse asdict arguments

opts, args = getopt(argv[1:], 'NHTs:cahv')
opts = dict(opts)

if opts.has_key('-v'): # print version number
	print __version__
	exit()
elif not args or opts.has_key('-h'): # print general help
	print _generalhelp
	exit()

style = opts.get('-s', getpref('style', _defaultstyle)).lower()

if not _styles.has_key(style):
	print >> stderr, "Unknown style: %s; using %s instead." % (style, _defaultstyle)
	style = _defaultstyle
style = _styles.get(style)
appname = args[0]
shortname = appname.split('/')[-1]
vieweroptions = ' '.join(args[1:]).strip()


# render/export
ensureasdictionary()

if opts.has_key('-H'): # export HTML (note: no autowrap)
	print doevent('HTML', Appl=appname, Styl=style, Opts=' '.join(argv[1:]))
elif opts.has_key('-T'): # export plain text (note: no autowrap)
	print doevent('TEXT', Appl=appname, Styl=style, Opts=' '.join(argv[1:]))
elif opts.has_key('-N'): # non-interactive mode
	print >> _out, doevent('Help', Appl=appname, Styl=style, Opts=vieweroptions or '-o')
else:
	session = doevent('Oses', Appl=appname, Styl=style)
	while 1:
		if vieweroptions:
			if vieweroptions.startswith('-'):	
				print >> _out, doevent('Help', Appl=appname, Styl=style, Sess=session, Opts=vieweroptions)
			elif vieweroptions in ['e', 'exit']:
				break
			elif vieweroptions in ['h', 'help']:
				print '\nViewer Help\n'
				print _viewerhelp
			elif vieweroptions in ['sa', 'show all']:
				doevent('Svis', Sess=session, Show='all')
			elif vieweroptions in ['sh', 'show hidden']:
				doevent('Svis', Sess=session, Show='hidden')
			elif vieweroptions in ['sv', 'show visible']:
				doevent('Svis', Sess=session, Show='visible')
			else:
				args = vieweroptions.split()
				cmd = args.pop(0)
				if cmd in ['d', 'default']:
					if args:
						name = args.pop(0)
						if args:
							val = args[0]
						else:
							val = None
						if name == 'style':
							if val:
								try:
									setpref('style', _styles[val])
								except KeyError:
									print >> stderr, 'Unknown style: %s' % val
							else:
								print getpref('style', _defaultstyle)
						elif name == 'wrap':
							if val:
								try:
									val = int(val)
								except ValueError:
									print >> stderr, 'Bad wrap value: %s' % val
								else:
									setpref('wrap', val)
							else:
								print getpref('wrap', _defaultwrap)
						else:
							print >> stderr, 'Unknown default: %s' % vieweroptions
					else:
						print >> stderr, "Command requires an argument."
				else:
					print >> stderr, 'Unknown command: %s' % vieweroptions
		try:
			vieweroptions = raw_input(shortname+'> ').strip()
		except EOFError:
			print
			break
		except KeyboardInterrupt:
			print
			vieweroptions = ''
	doevent('Cses', Sess=session)
