#!/bin/sh
(set -o igncr) 2>/dev/null && set -o igncr; # comment is needed
#
# USAGE: p4review [-t tabs] [-p] [-2] [+w]
#                 [p4 diff args]
#                 [-s] [-c changelist]
#                 [-du#]
#                 [-depot servername]
#                 [-user user]
#                 [-password password]
#                 [-client client]
#                 [files or filespec ...]
#
# Produce a listing of changes to source files using p4 diff.
# The output is a post-processed form of unified-diff output (diff -u)
# showing deleted lines (-), and added lines (+).
# The default context is +/- 20 lines, and the default tabstop is 4.
# by default, blanks are ignored.  Use +w to make diff consider blanks.
#
# -depot Perforce server, may also be specified as a P4 environment variable.
# -user  Perforce user, may also be specified as a P4 environment variable.
# -password Perforce password, may also be specified as a P4 environment variable.
# -client Perforce client spec, may also be specified as a P4 environment variable.
#
# -c <changelist> is used to choose which set of changes you want
# to look at.  the default value is "-c default" which views the
# files in your default changelist.
#
# -s is used to indicate that the changelist has already been submitted
# to perforce.  p4review will then take the versions of the files that 
# were submitted in <changelist> and diff those files against their previous
# versions.  The -s option will not work with the default changelist. 
#
# use the -2 argument to run a "p4 diff2" command.  file arguments
# in this case are whatever p4 diff2 expects.  this syntax allows you
# to diff between any two revisions that are already checked in.
#
# use -dc to specify a different number of context lines.  The default
# is 20.  with a bigger number, you'll see more of the surrounding code.
#
#
# Change history:
#
# 16-SEP-97 (ETS) : updated for cvs 1.9.  Should still be backwards
#                   compatible with cvs 1.3. 
# 25-AUG-99 (ETS) : updated for p4 99.1
# 29-MAY-01 (ETS) : modified to  use p4 diff -dU (unified diff) instead
#                   of context diff.  Also, drive the process using p4 opened
#                   which allows us to see deleted and added files.
# 18-JUN-01 (ETS) : cleanup, rename to p4review (not p4u or p4c)
# 21-JUN-01 (EDUVOS) : Adding -p flag to simply print the files in the changelist
# 2-Oct-01 (TPR): don't show text for added files that aren't text and fix weird case
#                 where p4 where was breaking (see submission notes for details)
# 15-JAN-03 (CMURPHY) : Update for use different perforce depots.
#


##########################################################
# editedFile() - prints out the file in a nice format
# 
# ARGS
#	p4command - the perforce command to run to generate the
#			diff'ed output
##########################################################
editedFile()
{
	$p4command 2>&1 |
	sed -e 's/</\&lt;/g' -e 's/>/\&gt;/g' |
	expand -t $tabstop |
	$AWK '
BEGIN {
 PAGE1="<pre>"
 PAGE2="</pre>\f\n"
 FILE1="<hr/><h3>"
 FILE2="</h3>"
 ADD1="<b>+";
 ADD2="</b>";
 OLD1="<b>|</b><i><font color=gray>";
 OLD2="</font></i>";
 NEW1="<b>|";
 NEW2="</b>";
 DEL1="<b>-</b><i><font color=gray>";
 DEL2="</font></i>";
 NORM1=" "
 NORM2=""
 SEP="<hr>"
 }

# printline(): output line with line number
# and prefix located as such: "<prefix> <number>  <line>"
# note: "<prefix> <number>  " is 8 characters long.
function printline(num, prefix, rest)
{
	# dont colorize, this colorizer sucks
	#rest = colorize(rest);
	if (prefix == "+")
		printf("%s %4d  %s%s\n", ADD1, num, rest, ADD2);
	else if (prefix == "-")
		printf("%s       %s%s\n", DEL1, rest, DEL2);
	else
		printf("%s %4d  %s%s\n", NORM1, num, rest, NORM2);
}

function colorize(str)
{
	gsub(" public ", " <font color=blue>public</font> ", str);
	gsub(" private ", " <font color=blue>private</font> ", str);
	gsub(" protected ", " <font color=blue>protected</font> ", str);
	gsub(" class ", " <font color=blue>class</font> ", str);
	gsub(" package ", " <font color=blue>package</font> ", str);
	gsub(" import ", " <font color=blue>import</font> ", str);
	gsub(" static ", " <font color=blue>static</font> ", str);
	gsub(" final ", " <font color=blue>final</font> ", str);
	gsub(" try ", " <font color=blue>try</font> ", str);
	gsub(" try{", " <font color=blue>try{</font>", str);
	gsub(" finally ", " <font color=blue>finally</font> ", str);
	gsub(" finally{", " <font color=blue>finally{</font>", str);
	gsub(" catch ", " <font color=blue>catch</font> ", str);
	gsub(" catch\\(", " <font color=blue>catch(</font>", str);

	gsub(" byte ", " <font color=blue>byte</font> ", str);
	gsub(" short ", " <font color=blue>short</font> ", str);
	gsub(" int ", " <font color=blue>int</font> ", str);
	gsub(" long ", " <font color=blue>long</font> ", str);
	gsub(" char ", " <font color=blue>char</font> ", str);
	gsub(" boolean ", " <font color=blue>boolean</font> ", str);
	gsub(" void ", " <font color=blue>void</font> ", str);
	gsub(" null ", " <font color=blue>null</font> ", str);
	gsub(" double ", " <font color=blue>double</font> ", str);
	gsub(" long ", " <font color=blue>long</font> ", str);

	gsub(" while ", " <font color=blue>while</font> ", str);
	gsub(" while\\(", " <font color=blue>while(</font> ", str);
	gsub(" switch ", " <font color=blue>switch</font> ", str);
	gsub(" switch\\(", " <font color=blue>switch(</font>", str);
	gsub(" case ", " <font color=blue> case </font> ", str);
	gsub(" do ", " <font color=blue>do</font> ", str);
	gsub(" do{", " <font color=blue>do</font>", str);
	gsub(" default ", " <font color=blue>default</font> ", str);
	gsub(" if ", " <font color=blue>if</font> ", str);
	gsub(" if\\(", " <font color=blue>if(</font>", str);
	gsub(" else ", " <font color=blue>else </font> ", str);
	gsub(" else{", " <font color=blue>else{</font>", str);
	gsub(" for ", " <font color=blue>for</font> ", str);
	gsub(" for\\(", " <font color=blue>for(</font>", str);
	gsub(" break ", " <font color=blue>break</font> ", str);
	gsub(" break;", " <font color=blue>break;</font>", str);
	gsub(" continue ", " <font color=blue>continue</font> ", str);
	gsub(" continue;", " <font color=blue>continue;</font>", str);
	gsub(" return ", " <font color=blue>return</font> ", str);

	return str;
}

# start a new file.  Will emit a form feed if necessary.
function formfeed()
{
	if (second_file)
		print PAGE2
	second_file = 1;
}

#
# diff block separator in the format
#
#     @@ -L1,N1 +L2,N2 @@
#
#     L1 = starting line of original file
#     N1 = no. of lines in range from original file
#     L2 = starting line of new file
#     N2 = no. of lines from new file
#

index($0, "@@ ") == 1 {
	# parse line numbers
	print SEP;
	split($3, a, ",");
        line = a[1];
	next;
}

# cvs diff file separator
$1 == "====" {
	filename = "<i>Edit</i> " $2 ;
	formfeed();
	print FILE1 filename FILE2 PAGE1
	next;
}

# normal output line
substr($0, 1, 1) == " " {
        rest = substr($0, 2);
	printline(line++, " ", rest);
	next;
}

# deleted line
substr($0, 1, 1) == "-" {
        rest = substr($0, 2);
	printline(line, "-", rest);
	next;
}

# added line
substr($0, 1, 1) == "+" {
        rest = substr($0, 2);
	printline(line++, "+", rest);
	next;
}'
}

##########################################################
# printFile() - prints out the file in a nice format
# 
# ARGS
#	file - the perforce name of the file to print
##########################################################
printFile()
{
	echo '<pre><hr/><h3><i>Print</i>' "$file" '</h3>'
	file=`echo "$file" | sed -e 's/#.*$//'`
	set -- `p4 where $file`
	file=$3
	sed -e 's/</\&lt;/g' -e 's/>/\&gt;/g' <$file |
	expand -t $tabstop |
	$AWK '

	function printline(num, rest)
	{
		printf("%s %4d  %s%s", " ", num, rest, "");
		print ""# blank line
	}

	# every line is processed this way
	{
		printline(++line,$0);
	}
	'
}

##########################################################
# deletedFile() - prints out a delete message for the file
# 
# ARGS
#	file - the name of the file that was deleted
##########################################################
deletedFile()
{
	echo '<hr/><h3><i>Delete</i>' "$file" '</h3>'
}

##########################################################
# addedFile() - prints out the contents of a file that was
#		added to perforce
# 
# ARGS
#	file - the name of the file that was added
##########################################################
addedFile()
{
		echo '<pre><hr/><h3><i>Add</i>' "$file" '</h3>'
		file=`echo "$file" | sed -e 's/#.*$//'`
		case $type in
		    *text) ;;
		    *) echo '</pre>'
		       return ;;
		esac
		set -- `p4 where $file | sed -n -e '/^\/\//p'`
		file=$3
		sed -e 's/</\&lt;/g' -e 's/>/\&gt;/g' <$file |
		expand -t $tabstop |
		$AWK '
	BEGIN {
	 PAGE1="<pre>"
	 PAGE2="</pre>\f\n"
	 FILE1="<hr/><h3>"
	 FILE2="</h3>"
	 ADD1="<b>+";
	 ADD2="</b>";
	 OLD1="<b>|</b><i><font color=gray>";
	 OLD2="</font></i>";
	 NEW1="<b>|";
	 NEW2="</b>";
	 DEL1="<b>-</b><i><font color=gray>";
	 DEL2="</font></i>";
	 NORM1=" "
	 NORM2=""
	 SEP="<hr>"
	 }

	function printline(num, prefix, rest)
	{
		if (prefix == "+")
			printf("%s %4d  %s%s", ADD1, num, rest, ADD2);
		else if (prefix == "-")
			printf("%s       %s%s", DEL1, rest, DEL2);
		else
			printf("%s %4d  %s%s", NORM1, num, rest, NORM2);
		print ""# blank line
	}

	# every line is processed this way
	{
		printline(++line, "+", $0);
	}'
}

#
# save diff args in args array.  will pass these on
# to "p4 diff".
#
P4DIFF='diff -b'
export P4DIFF
tabstop=4
args='' 
context="-dU20"
command=diff
changelist='default'
depot='default'
user='default'
password='default'
client='default'
act='edit'
# read command line options
while true; do
	case $1 in
	-2) command=diff2; shift;;
	-p) act=print; shift;;
	-dU*|-du*) context=$1; shift;;
	-d|-p|-u|-P|-x) args="$args $1 $2"; shift 2;;
	-t) tabstop=$2; shift 2;;
	-depot) depot=$2; shift 2;;
	-user) user=$2; shift 2;;
	-password) password=$2; shift 2;;
	-client) client=$2; shift 2;;
	+w) P4DIFF='diff'; shift;;	# remove -b from underlying diff
	-c) changelist=$2; shift 2;;
	-s) command=describe; shift;;
	-*) args="$args $1"; shift;;
	@*) command=diff2;
	    change=`expr substr $1 2 10`;
	    set -- //depot/...@`expr $change - 1` //depot/...@$change ;
	    break;;

	*) break;;
	esac
done

AWK=awk
p4=p4

case `uname` in
    SunOS) AWK=nawk;;
    CYGWIN*) p4=p4nt;;
esac

files=$*

if [ "$depot" != "default" ]; then
	P4PORT=$depot':1666'
	export P4PORT
fi
if [ "$user" != "default" ]; then
	P4USER=$user
	export P4USER
fi
if [ "$password" != "default" ]; then
	P4PASSWD=$password
	export P4PASSWD
fi
if [ "$client" != "default" ]; then
	P4CLIENT=$client
	export P4CLIENT
fi
echo "<H2>" Perforce server: $depot "</H2>"

if [ "$changelist" != "default" ]; then
	echo "<H2>" Changelist $changelist "</H2>"
	echo "<pre>"
	$p4 describe -s $changelist |
		sed -e 's/</\&lt;/g' -e 's/>/\&gt;/g'
	echo "</pre>"
else
	echo "<H2>" Default Changelist "</H2>"
	echo "<pre>"
	$p4 opened -c default $files |
		sed -e 's/</\&lt;/g' -e 's/>/\&gt;/g'
	echo "</pre>"
fi

if [ "$command" = "describe" ]; then
#
# This is for changelists that were already submitted, so we
# we p4 describe -s to get a list of the files that changed
# then diff those files vs. the previous revisions of those files
# and generate some html happy output
#
	if [ "$changelist" = "default" ]; then
		echo "Can't use -s with the default changelist"
		exit
	fi
	$p4 $command -s $changelist	2>&1 |
	while read dots file action; do
		if [ "$dots" = "..." ]; then
			file=`echo "$file" | sed -e 's/\#[0-9]*$//g'`

			if [ "$act" = "print" ]; then
				action=print
				fi

			if [ "$action" = "edit" -o "$action" = "integrate" ]; then
				p4command="$p4 diff2 -du $file@`expr $changelist - 1` $file@$changelist"
				editedFile
				
			elif [ "$action" = "add" -o "$action" = "branch" ]; then
				type=`p4 fstat $file | sed -ne '/\.\.\. headType/s/.*headType //p'`
				addedFile
			elif [ "$action" = "delete" ]; then
				deletedFile
			elif [ "$action" = "print" ]; then
				printFile
			else
				echo '<hr/><h3><i>' "$action" '</i>' "$file" '</h3>'
			fi
		fi
	done

else
#
# use p4 opened to get a list of files to analyze.  For each file,
# list the status.  if it's added, print it's contents, and if it is
# edited, do a fancy diff using awk to post-process it.
#
	$p4 opened -c $changelist $files 2>&1 |
	while read file sep action changelist change type; do
		if [ "$act" = "print" ]; then
			action=print
		fi
		type=`echo $type | sed -e 's/(\(.*\))/\1/'`
		if [ "$action" = "edit" -o "$action" = "integrate" ]; then
			p4command="$p4 $command $context $args $file"
			editedFile
		elif [ "$action" = "delete" ]; then
			deletedFile
		elif [ "$action" = "print" ]; then
			printFile
		elif [ "$action" = "add" -o "$action" = "branch" ]; then
			addedFile
		else
			echo '<hr/><h3><i>' "$action" '</i>' "$file" '</h3>'
		fi
	done
fi
