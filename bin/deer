# -*- mode: shell-script -*-
# vim: set ft=zsh :
#########################################################################
# Copyright (C) 2014  Wojciech Siewierski                               #
#                                                                       #
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or     #
# (at your option) any later version.                                   #
#                                                                       #
# This program is distributed in the hope that it will be useful,       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of        #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
# GNU General Public License for more details.                          #
#                                                                       #
# You should have received a copy of the GNU General Public License     #
# along with this program.  If not, see <http://www.gnu.org/licenses/>. #
#########################################################################

DEER_HEIGHT=22

deer-move()
{
    local FILES MOVEMENT INDEX
    MOVEMENT=$1

    FILES=($DEER_DIRNAME/*(N-/:t) $DEER_DIRNAME/*(N-^/:t))

    INDEX=${(k)FILES[(re)$DEER_BASENAME]}

    if (( INDEX+MOVEMENT <= 0 )); then
        DEER_BASENAME=$FILES[1]
    elif (( INDEX+MOVEMENT > $#FILES )); then
        DEER_BASENAME=$FILES[$#FILES]
    else
        DEER_BASENAME=$FILES[$INDEX+$MOVEMENT]
    fi
}

deer-enter()
{
    [ -n "$DEER_BASENAME" -a -d "$DEER_DIRNAME/$DEER_BASENAME" ] || return

    DEER_DIRNAME=$DEER_DIRNAME$DEER_BASENAME/

    # get the first directory
    DEER_BASENAME=($DEER_DIRNAME/*(N-/:t) $DEER_DIRNAME/*(N-^/:t))
    DEER_BASENAME=$DEER_BASENAME[1]
}

deer-leave()
{
    [ $DEER_DIRNAME = / ] && return
    DEER_BASENAME=$DEER_DIRNAME:t
    DEER_DIRNAME=$DEER_DIRNAME:h
    [ $DEER_DIRNAME = / ] || DEER_DIRNAME+=/
}

deer-search()
{
    local OLD_BASENAME=$DEER_BASENAME
    BUFFER=""
    PREDISPLAY="deer/ "

    local old_region_highlight
    old_region_highlight=($region_highlight)
    region_highlight=("P0 4 fg=green")
    zle recursive-edit
    region_highlight=($old_region_highlight)

    DEER_BASENAME=($DEER_DIRNAME/${~BUFFER}*(N-:t))
    DEER_BASENAME=${DEER_BASENAME[1]:-$OLD_BASENAME}
    PREDISPLAY=$OLD_LBUFFER
}

deer--mark-file-list()
{
    local MARKED=$1
    shift

    print -l -- "$@" \
        | grep -Fx -B5 -A$DEER_HEIGHT -m1 -- "$MARKED" \
        | perl -pe 'BEGIN{$name = shift}
                    if ($name."\n" eq $_) {
                        $_="-> $_"
                    } else {
                        $_="   $_"
                    }' -- "$MARKED"
}

deer-preview()
{
    local FILES PREVIEW PARENTFILES OUTPUT
    local SEPARATOR="------"

    LBUFFER=$DEER_DIRNAME$DEER_BASENAME
    RBUFFER=""
    region_highlight=("P0 $#PREDISPLAY fg=black,bold"
                      "0 $#DEER_DIRNAME fg=blue,bold")


    FILES=($DEER_DIRNAME/*(N-/:t)
           $SEPARATOR
           $DEER_DIRNAME/*(N-^/:t))
    PARENTFILES=($DEER_DIRNAME:h/*(N-/:t))

    local IFS=$'\n'
    FILES=($(deer--mark-file-list "$DEER_BASENAME" $FILES))
    PARENTFILES=($(deer--mark-file-list "$DEER_DIRNAME:t" $PARENTFILES))
    unset IFS

    FILES=(${(F)FILES[1,$DEER_HEIGHT]})
    PARENTFILES=(${(F)PARENTFILES[1,$DEER_HEIGHT]})


    if [ -f $DEER_DIRNAME/$DEER_BASENAME ]; then
        if file $DEER_DIRNAME/$DEER_BASENAME | grep -Fq text; then
            PREVIEW="--- Preview: ---"$'\n'$(head -n$DEER_HEIGHT $DEER_DIRNAME/$DEER_BASENAME)

            # Replace '/' with '\' to allow using it as a
            # paste(1)/column(1) separator.
            PREVIEW=${PREVIEW//\//\\}
        else
            PREVIEW="--- Binary file, preview unavailable ---"
        fi
    else
        PREVIEW=($DEER_DIRNAME/$DEER_BASENAME/*(N-/:t)
                 $SEPARATOR
                 $DEER_DIRNAME/$DEER_BASENAME/*(N-^/:t))
        PREVIEW=${(F)PREVIEW[1,$DEER_HEIGHT]}
    fi

    OUTPUT="$(paste -d/ <(<<< $PARENTFILES                   \
                            | awk '{print substr($0,1,16)}') \
                        <(<<< $FILES)                        \
                        <(<<< $PREVIEW)                      \
                | column -t -s/                              \
                | awk -vwidth=$COLUMNS '{print substr($0,1,width-1)}')"
    zle -M -- $OUTPUT
    zle -R
}

deer-restore()
{
    PREDISPLAY=""
    region_highlight=()
    LBUFFER=$OLD_LBUFFER
    RBUFFER=$OLD_RBUFFER
    if [ "$1" = "--append" ]; then
        shift
        [ -n "$1" ] && LBUFFER+=$1
    else
        [ -n "$1" ] && RBUFFER=$1$RBUFFER
    fi
    zle redisplay
    zle -M ""
}

deer-launch()
{
    emulate -L zsh
    local DEER_DIRNAME DEER_BASENAME
    local REPLY OLD_LBUFFER OLD_RBUFFER

    OLD_LBUFFER=$LBUFFER
    OLD_RBUFFER=$RBUFFER
    PREDISPLAY=$OLD_LBUFFER

    DEER_DIRNAME=$PWD
    if [ -n "$NUMERIC" ]; then
        for i in {1..$NUMERIC}; do
            deer-leave
        done
    else
        # Don't change cwd but initialize the variables.
        deer-leave
        deer-enter
    fi

    deer-preview
    while read -k; do
        case $REPLY in
            k)
                deer-move -1
                deer-preview
                ;;
            K)
                deer-move -5
                deer-preview
                ;;
            j)
                deer-move 1
                deer-preview
                ;;
            J)
                deer-move 5
                deer-preview
                ;;
            l)
                deer-enter
                deer-preview
                ;;
            h|$'\014')          # \014 is Ctrl+L, from Helm for Emacs
                deer-leave
                deer-preview
                ;;

            /)
                deer-search
                deer-preview
                ;;

            q)
                deer-restore
                break
                ;;
            a)
                deer-restore --append $DEER_DIRNAME:q$DEER_BASENAME:q
                break
                ;;
            A)
                deer-restore --append $DEER_DIRNAME$DEER_BASENAME
                break
                ;;
            i)
                deer-restore $DEER_DIRNAME:q$DEER_BASENAME:q
                break
                ;;
            I)
                deer-restore $DEER_DIRNAME$DEER_BASENAME
                break
                ;;
            c)
                deer-leave
                ;&
            C)
                if [[ -d $DEER_DIRNAME$DEER_BASENAME && -x $DEER_DIRNAME$DEER_BASENAME ]]; then
                    cd -- $DEER_DIRNAME$DEER_BASENAME
                    deer-restore
                    break
                fi
                ;;
            r)
                rifle $DEER_DIRNAME$DEER_BASENAME
                ;;
        esac
    done
}
zle -N deer-launch

bindkey '\ek' deer-launch
