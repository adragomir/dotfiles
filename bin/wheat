#!/usr/bin/env ruby

class WheatPaste
  
  begin
    require 'rubygems'
    require 'appscript'
  rescue LoadError
    puts "wheatpaste needs rb-appscript from http://rb-appscript.rubyforge.org"
    exit(99)
  end
  
  # Creates an instance-level binding to Quicksilver
  def initialize
    begin
      @quicksilver = Appscript.app("Quicksilver")
    rescue FindApp::ApplicationNotFoundError
      puts "wheatpaste needs Quicksilver from http://quicksilver.blacktree.com"
      exit(98)
    end
  end

  # Displays the string +text+ via Quicksilver's LargeType action
  def wheatpaste(text, pause_length)
    @quicksilver.show_large_type(text)
    if pause_length == -1
      $stdin.getc
    else
      sleep(pause_length)
    end
  end
  
  # Process a stream for wheatpasting
  def wheatpaste_stream(stream, pause_length, line_by_line)
    if line_by_line
      stream.each_line do |line|
        wheatpaste(line.chomp, pause_length)
      end
    else
      wheatpaste(stream.read.chomp, pause_length)
    end
  end
  
  # Process a file for wheatpasting
  def wheatpaste_file(file, pause_length, line_by_line)
    begin
      # A bit of magic to allow "-" to be used to mean stdin
      stream = (file == "-") ? $stdin : File.open(file)
      wheatpaste_stream(stream, pause_length, line_by_line)
    rescue Errno::ENOENT
      $stderr.puts "File not found: #{file}"
    end
  end
  
  # Process a directory for wheatpasting
  def wheatpaste_directory(directory, pause_length, line_by_line)
    initial_directory = Dir.pwd
    Dir.chdir(directory)
    
    Dir["**/*"].sort.each do |f|
      if File.file?(f)
        wheatpaste_file(f, pause_length, line_by_line)
      end
    end
    
    Dir.chdir(initial_directory)
  end
  
end

class WheatPaste::Options
  
  require 'optparse'
  require 'ostruct'
  
  # Parse options given on the command line
  def self.parse(args)
    options = OpenStruct.new
    options.pause_length = 0
    options.line_by_line = false
    
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: wheatpaste [options] file_1 file_2 ..."
      opts.separator ""
      opts.separator "Options:"
      
      opts.on("-p N", Integer,
        "Display each wheatpaste for N seconds before continuing") do |p|
        options.pause_length = p
      end
      
      opts.on("-r", "Remote control mode") do
        options.pause_length = -1
      end
      
      opts.on("-l", "Wheatpaste files line-by-line instead of in their entirety") do
        options.line_by_line = true
      end
      
      opts.on("-h", "Show this help message") do |h|
        puts opts
        exit
      end
    end
    
    opts.parse!(args)
    return options
  end
  
end

class WheatPaste::Executable
  
  # Called at runtime by the wheatpaste executable
  def self.run(args)
    options = WheatPaste::Options.parse(args)
    wp = WheatPaste.new
    
    # no files specified, parsing stdin
    if args.size == 0
      wp.wheatpaste_stream($stdin, options.pause_length, options.line_by_line)
    else
      args.each do |file|
        if File.directory?(file)
          wp.wheatpaste_directory(file, options.pause_length, options.line_by_line)
        else
          wp.wheatpaste_file(file, options.pause_length, options.line_by_line)
        end
      end
    end
  end
  
end

WheatPaste::Executable.run(ARGV)


