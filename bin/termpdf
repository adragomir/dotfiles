#!/usr/local/bin/bash
###########################################################################
# termpdf is a barebones in-line graphical pdf viewer for terminals that
# support in-line graphics.
#
# It currently supports pdf, djvu, and tif files.
#
# On X11, termpdf uses the w3mimgdisplay program supplied with the w3m 
# browser. On OSX, termpdf relies on iTerm2's support of inline images 
# (in iTerm 2.9 or later).
# 
###########################################################################

###########################################################################
# SETTINGS
#
print_command=lp
print_options=("-o sides=two-sided-long-edge")
#
text_conversion_method=pdftotext
#text_conversion_method=html_pandoc
#
clipboard="pbcopy"
#
wrap="false" # default is not to pipe text through wrap in text mode 
#
text_pagers[0]='cat' # default pager is 'cat'
#
text_pagers[1]='less -XFRE' # secondary pager is 'less'
#
# command keys:
#
declare -A keys
keys=(
  ["next-page"]="k"
  ["previous-page"]="j"
  ["next-doc"]="K"
  ["previous-doc"]="J"
  ["goto-page"]="g"
  ["goto-last"]="G"
  ["refresh-view"]="r"
  ["reload-document"]="R"
  ["crop-margins"]="z"
  ["text"]="t"
  ["horizontal-split"]="s"
  ["vertical-split"]="v"
  ["print"]="p"
  ["pager-toggle"]="l"
  ["wrap-toggle"]="w"
  ["yank-text"]="Y"
  ["search"]="/"
  ["next-match"]="n"
  ["previous-match"]="N"
  ["mark-page"]="m"
  ["to-mark"]="'"
  ["next-mark"]="]" # not implemented
  ["previous-mark"]="[" # not implemented
  ["yank-pdf"]="y"
  ["open-file"]="o"
  ["help"]="?"
  ["debug"]="d"
  ["quit"]="q"
)
#
display="image" # if you want to display text by default, set this to "text" 
#
halo=2 # number of pages out to convert in the background
###########################################################################

###########################################################################
# Functions for displaying images in iTerm2
#
# The following two functions are borrowed from the imgcat script at
# 
#   https://raw.githubusercontent.com/gnachman/iTerm2/master/tests/imgcat
#
# tmux requires unrecognized OSC sequences to be wrapped with DCS tmux;
# <sequence> ST, and for all ESCs in <sequence> to be replaced with ESC ESC. It
# only accepts ESC backslash for ST.
function print_osc() {
if [[ $TERM == screen* ]] ; then
    printf "\033Ptmux;\033\033"
else
    printf "\033"
fi
}

function print_st() {
if [[ $TERM == screen* ]] ; then
    printf "\a\033\\"
else
    printf "\a"
fi
}

# This function is also borrowed from imgcat, but I've added support
# for specifying width and height.
#
# print_image filename inline base64contents
#   filename: Filename to convey to client
#   inline: 0 or 1
#   base64contents: Base64-encoded contents
function print_image_iterm() {
print_osc
printf ']1337;File='
if [[ -n "$1" ]]; then
    printf 'name='`echo -n "$1" | base64`";"
fi
if $(base64 --version 2>&1 | grep GNU > /dev/null)
then
    BASE64ARG=-d
else
    BASE64ARG=-D
fi
echo -n "$3" | base64 $BASE64ARG | wc -c | awk '{printf "size=%d",$1}'
printf ";inline=$2"
printf ";width=$width"
printf ";height=$height"
printf ":"
echo "$3"
print_st
printf '\n'
}
#
###########################################################################

###########################################################################
# Functions for displaying images using w3mimgdisplay
#
#
# function that gets important info about xterm windows 
#
function get_xterm_info() { 
# move cursor to to left corner
tput cup 2 2 # but not 0 0, because that often breaks in tmux

# use escape codes to get window dimensions and cursor position
exec < /dev/tty
oldstty=$(stty -g)
stty raw -echo min 0 
print_osc > /dev/tty
printf "[14t" > /dev/tty # win size in pixels
print_st > /dev/tty
read -sr px_dim # win size in pixels
print_osc > /dev/tty
printf "[18t" > /dev/tty # win size in characters
print_st > /dev/tty
read char_dim # win size in characters
print_osc > /dev/tty
printf "[6n" > /dev/tty # cursor position in characters
print_st > /dev/tty
read curs_pos
stty $oldstty

# process the output
# window dimension in pixels
px_dim=${px_dim:2}
px_y=$(echo "$px_dim" | awk -F ';' '{print $2}')
px_x=$(echo "$px_dim" | awk -F ';' '{print $3}')
px_x=${px_x%?}
# window dimension in characters
char_dim=${char_dim:2}
char_y=$(echo "$char_dim" | awk -F ';' '{print $2}')
char_x=$(echo "$char_dim" | awk -F ';' '{print $3}')
char_x=${char_x%?}
# cursor position in characters
# (we need this to position images within tmux panes)
curs_pos=${curs_pos:2}
curs_y=$(echo "$curs_pos" | awk -F ';' '{print $1}')
curs_x=$(echo "$curs_pos" | awk -F ';' '{print $2}')
curs_x=${curs_x%?}
curs_x=$[$curs_x] 
curs_y=$[$curs_y - 2]
}

function get_xterm_font_factors() {
x_factor=$(echo "$px_x / ( $char_x + 1)" | bc)
y_factor=$(echo "$px_y / ( $char_y + 1)" | bc)
}

# get xterm position in pixels
function get_xterm_position() {
x_pos=$(echo "$curs_x * $x_factor" | bc)
y_pos=$(echo "$curs_y * $y_factor" | bc)
}

function print_image_w3m() {
    #get the ratio of width to height for image
    img_factor=$(convert "$tmp_file" -ping -format "scale=3; %w / %h\n" info: 2> /dev/null | bc )  
    #get ratio of width to height for our terminal/tmux pane
    screen_factor=$(echo "scale=3; ($width * $x_factor) / ($height * $y_factor)" | bc)
    if [[ $(echo "$img_factor < $screen_factor" | bc) -eq 1 ]]; then
        # set height to max, set width proportional to height
        h=$[$height * y_factor]
        w=$(echo "$img_factor * $h" | bc | sed 's/\..*//')
    else
        # set width to max, height proportional to width
        w=$[$width * x_factor]
        h=$(echo "$w / $img_factor" | bc)
        if [[ $x_factor == "" || $y_factor == "" ]]; then get_xterm_font_factors; fi
        if [[ $h == "" || $w == "" ]]; then
            print_image_w3m
            return
        fi
       echo
    fi
    # center image
     x_pos=$[$x_pos + ($width * $x_factor / 2) - ($w / 2)]
     y_pos=$[$y_pos + ($height * $y_factor / 2) - ($h / 2)] 
    printf "0;1;$x_pos;$y_pos;$w;$h;;;;;$tmp_file\n4;\n3;" | w3mimgdisplay
    tput cup $height 0
}


###########################################################################


###########################################################################
# Function for displaying images, depending on OS
#
function print_image() {
    if [[ $os == 'Darwin' ]]; then
        print_image_iterm $@
    else
        print_image_w3m $@
    fi
}
#
###########################################################################


###########################################################################
# Functions for searching, yanking, text within documents 

function select_results() {
# if selecta is available, interactive selection of matches
    command -v selecta >/dev/null 2>&1 && {
    index=$(for res in ${results[@]}; do
        echo ${index}:$res
        let index++
    done | selecta)
    index=${index%%:*}
    }
}
# A function for listing search results and selecting

# A function that uses pdfgrep to search pdfs
function search_pdf() {
text=$(read_string)
if [[ $text != "" ]]; then
    IFS=$'\n' results=( $(pdfgrep -niC $[$width - 10] "$text" "$input_file") )
fi

if [ ${#results[@]} -gt 0 ]; then 
    index=0
    while [[ ${results[$index]%%:*} -lt $n ]] # find first match at or after page
    do
        let index++
    done
    select_results
    message="${results[$index]#*:}"
else 
    index=-1
fi
}

# A function for finding text using the appropriate tool
function find_text() {
case $ft in
    pdf)
        search_pdf
        ;;
    *)
        message="text search not available"
        ;;
esac
}

# A function for yanking text from current page to clipboard
function yank_text() {
if [[ $1 -gt $2 ]]; then 
    start_page=$2
    end_page=$1
else
    start_page=$1
    end_page=$2
fi
case $ft in
    pdf)
        pdftotext -f $start_page -l $end_page -layout "$input_file" - | $clipboard 
        message="pages $start_page to $end_page copied to clipboard"
        ;;
    djvu)
        djvutxt -page=$start_page-$end_page "$input_file" | $clipboard 
        message="page copied to clipboard"
        ;;
esac
}
#
###########################################################################


###########################################################################
# A function for getting the dimensions of the current terminal
# window or pane.
function get_pane_size() {
width=$(tput cols)
height=$(stty size | awk '{print $1}')
width=$(expr $width - 1)
height=$(expr $height - 1 )
}
###########################################################################

###########################################################################
# Functions for dealing with pages
#
function get_pages() {
case $ft in
    pdf)
        pages=$(pdfinfo "$input_file" 2>/dev/null \
            | grep "^Pages:" | awk '{print $2}') 
        ;;
    djvu)
        pages=$(djvudump "$input_file" 2>/dev/null \
            | sed -n '2s/.*files //;s/ pages)//p')
        ;;
    tif|tiff)
        pages=$(tiffinfo "$input_file" 2>/dev/null \
            | sed -n 's/ *Page Number:.*-//p' | sed -n '1p')
        ;;
    *)
        pages=1 
        multipage='false'
esac
if [[ ! $pages =~ [0-9]* ]]; then
    pages=1
fi
}

# A function for validiating page numbers
function page_limits() {
if [[ $n == "" ]]; then n=1; fi
if [[ "${n%[AB]}" -le 0 ]]; then n=1; fi
if [[ "${n%[AB]}" -ge "$pages" ]]; then n=$pages; fi
}
#
###########################################################################

###########################################################################
# Image conversion functions
#

function split_image() {
if [[ $split == 'vert' ]]; then geo='50%x100%'; fi
if [[ $split == 'horiz' ]]; then geo='100%x50%'; fi
convert ${tmp_file_root}-$1.png \
    -crop $geo +repage \
    ${tmp_file_root}-$1-%d.png 
mv ${tmp_file_root}-$1-0.png ${tmp_file_root}-${1}A.png
mv ${tmp_file_root}-$1-1.png ${tmp_file_root}-${1}B.png
# generate margin-trimmed version of the split page
convert -trim "$tmp_file_root-${1}A.png" \
    -bordercolor white -border 20x20 \
    "${tmp_file_root}-trimmed-${1}A.png" #2>/dev/null
convert -trim "$tmp_file_root-${1}B.png" \
    -bordercolor white -border 20x20 \
    "${tmp_file_root}-trimmed-${1}B.png" #2>/dev/null
}

function convert_pdf_cairo() {
pdftocairo -f $1 -l $1 -png -singlefile "$input_file" "${tmp_file_root}-$1"
}

# 
function convert_page() {
for i in "$@"
do       
    # don't attempt background conversions if tmp_dir has been deleted
    if [[ ! -d "${tmp_dir}" ]]; then exit; fi 
    # don't convert pages that have already been converted
    if [[ ! -f "${tmp_file_root}-$i.png" ]]; then
        if [[ $i =~ [AB]$ ]]; then
            convert_page ${i%[AB]}
            split_image ${i%[AB]}
        else
            case $ft in
                pdf)
                    convert_pdf_cairo "$i"
                    ;;
                djvu)
                    djvups -page=$i "$input_file" \
                        | convert -flatten ps:- "${tmp_file_root}-$i.png"
                    ;;
                tif|tiff)
                    convert -flatten "${input_file}[$[$i - 1]]" "${tmp_file_root}-$i.png"
                    ;;
                png)
                    cp "${input_file}" "${tmp_file_root}-$i.png" 
                    ;;
                *)
                    if [[ $os == 'Darwin' ]]; then
                        sips -s format png "${input_file}" --out "${tmp_file_root}-$i.png"
                    else
                        convert "${input_file}" "${tmp_file_root}-$i.png"
                    fi
                    ;;
            esac
        fi 
        # generate margin-trimmed version of the page
        convert -trim "$tmp_file_root-$i.png" \
            -bordercolor white -border 20x20 \
            "${tmp_file_root}-trimmed-$i.png" #2>/dev/null
    fi
done
}

function convert_background() {
(
core=${n%[AB]}
k=1
while ((k<=halo))
do
    after=$[$core + $k]
    before=$[$core - $k]
    [[ $after -le $pages ]] && convert_page $after
    [[ $before -gt 0 ]] && convert_page $before
    let k++
done
)&
}
#
###########################################################################


###########################################################################
# PDF utilities
#
# extract_pdf <page_no> <page_no> output_file
# 
function extract_pdf() {
if [[ $1 -gt $2 ]]; then 
    start_page=$2
    end_page=$1
else
    start_page=$1
    end_page=$2
fi
message=""
display_bar
read -e -p "<$start_page:$end_page>Save as: " out 
if [[ "$out" == "" ]]; then
    return
fi
if [[ ! "$out" =~ .pdf$ ]]; then
    out="${out}.pdf"
fi

if [[ ! -e "$out" ]]; then 
    pdftocairo -f $start_page -l $end_page -pdf "$input_file" "$out" 
    message="pages $start_page to $end_page saved as $out"
else
    message="file already exists"
fi
}



###########################################################################
# Text Conversion and Display functions
#
function convert_pdf_to_text() {
case $1 in
    pdftotext)
        pdftotext -f $n -l $n -layout "$input_file" -
        ;;
    html_pandoc)
        pdftohtml -f $n -l $n -i -noframes "$input_file" -stdout \
            | pandoc -f html -t plain --no-wrap
        ;;
esac
}
        
function display_text_pdf() {
clear
/cel
if [[ $text_pager == 'cat' ]]; then
    convert_pdf_to_text $text_conversion_method \
        | if [ $wrap == 'true' ]; then wrap -w $width; else cat; fi \
        | egrep --color "$text|\$" 
else
    convert_pdf_to_text $text_conversion_method \
        | if [ $wrap == 'true' ]; then wrap -w $width; else cat; fi \
        | $text_pager $([[ $text ]] && -p$text)
fi
}

function display_text_djvu() {
clear
if [[ $text_pager == 'cat' ]]; then
    djvutxt -page=$n "$input_file" \
        | if [ $wrap == 'true' ]; then wrap -w $width; else cat; fi \
        | egrep --color "$text|\$" 
else
    djvutxt -page=$n "$input_file" \
        | if [ $wrap == 'true' ]; then wrap -w $width; else cat; fi \
        | $text_pager $([[ $text ]] && -p$text)
fi
}

function display_text() {
case $ft in
    pdf)
        display_text_pdf
        ;;
    djvu)
        display_text_djvu
        ;;
    *)
        message="text display not available"
        ;;
esac
}
#
###########################################################################

###########################################################################
# Miscellaneous functions
#

function display_banner() {
banner[1]=" _                                _  __ "
banner[2]="| |_ ___ _ __ _ __ ___  _ __   __| |/ _|"
banner[3]="| __/ _ \ '__| '_ \` _ \| '_ \ / _\` | |_ "
banner[4]="| ||  __/ |  | | | | | | |_) | (_| |  _|"
banner[5]=" \__\___|_|  |_| |_| |_| .__/ \__,_|_|  "
banner[6]="                       |_|              "
clear
start_row=$[($height/2) - 3]
start_col=$[($width/2) - (${#banner[1]}/2)]
if [[ ${#banner[1]} -gt $width ]]; then
    start_col=0
fi
tput cup $start_row 0
for line in "${banner[@]}"; do
    printf "%*s%s\n" $start_col " " "$line"
done
}

function open_file() {
    message=""
    display_bar
    read -e -p "Open: " new_file
    if [[ -r $new_file ]]; then
        files=( "${files[@]}" "$new_file" )
        switch_doc $[${#files[@]} - 1 ]
    else
        message="No such file"
    fi
}

function read_string() {
string=""
while true
do
    read -n 1 input
    case $input in
        $'\e')
            string=""
            break
            ;;
        '')
            break
            ;;
        *)
            string="${string}${input}"
            ;;
    esac
done
    printf "$string"
}


function display_bar() {
right_side="$n/$pages"
if [[ ${#files[@]} -gt 1 ]]; then
    right_side="$right_side [$cur_doc/${#files[@]}]"
fi
offset=$[$width - ${#right_side}]
inset=5
message_length=$[$width - ${#right_side} - $inset - 2]
tput cup $height 0
tput el # erase any old stuff from previous commands
tput cup $height 5
printf "${message:0:$message_length}"
tput cup $height $offset
printf "$right_side"
tput cup $height 0 # put the cursor in left corner
}

function refresh_file() {
rm "${tmp_dir}/tmp"*
}

function print_file() {
display_bar
read -n 1 -p "Print $1 copies of document? " res
if [[ $res == 'y' ]]; then
    message="printing..."
    display_bar
    $print_command ${print_options[@]} -n $1 "$input_file"
    message="print job sent"
fi
}

function switch_doc() {
    nd=$1
    np=$2
    # validate nd
    if [[ $nd -gt ${#files[@]} ]]; then 
        nd=$[0 + ($nd - ${#files[@]})]
    fi
    if [[ $nd -le 0 ]]; then
        nd=$[${#files[@]} + $nd]
    fi
    # store current document page number and split
    doc_num[$cur_doc]=$n
    doc_split[$cur_doc]=$split
    # fetch new document number and split
    if [[ $np != "" ]]; then
        n=$np
    else
        n=${doc_num[$1]}
    fi
    split=${doc_split[$1]}
    display_doc $nd
}



function check_dependencies() {

case $ft in
    pdf)
        dep_list="pdftotext pdfgrep pdfinfo convert selecta"
        ;;
    djvu)
        dep_list="djvups djvutxt djvudump convert selecta"
        ;;
    tif)
        dep_list="convert"
        ;;
esac

os=$(uname)
if [[ $os != "Darwin" ]]; then
    dep_list="$dep_list bc w3mimgdisplay"
fi

for app in $dep_list
do
    command -v $app >/dev/null 2>&1 || {
        echo >&2 "termpdf requires $app but it's not installed."
        sleep 1; 
    } 
done
}

function print_help() {
clear
tput cup 0 0
cat <<EOH
[count]${keys['previous-page']}/${keys['next-page']}:  page back/forward
enter/space: page forward
[count]${keys['previous-doc']}/${keys['next-doc']}:  previous/next document
[count]${keys['goto-page']}:    go to page number
${keys['search']}<expr>:     search for <expr> 
[count]${keys['next-match']}:    go to next match for <expr>
[count]${keys['previous-match']}:    go to previous match for <expr>
${keys['refresh-view']}:           refresh display
${keys['reload-document']}:           reload document
${keys['crop-margins']}:           zoom (crop margins) 
${keys['text']}:           toggle text/image display
${keys['horizontal-split']}:           split pages horizontally
${keys['vertical-split']}:           split pages vertically
${keys['print']}:           print document
${keys['pager-toggle']}:           toggle pager in text mode" 
${keys['wrap-toggle']}:           toggle word-wrapping in text mode
${keys['yank-text']}:           yank pages between current and n as text
${keys['mark-page']}<char>:     store page number to <char> mark"           
${keys['to-mark']}<char>:     go to page stored in <char> mark"           
[count]${keys['yank-pdf']}:    yank pages to PDF 
${keys['open-file']}:           open file
${keys['help']}:           help
${keys['quit']}:           quit
EOH
read -p "Press any key to return" -n 1 -s dummy
if [ $dummy == 'q' ]; then exit; fi
clear
}

function cli_help() {
echo "Usage: termpdf.sh [options] file.pdf"
echo
echo "   options:"
echo "      -h|--help:   show this help"
echo "      -t|--text:   display text instead of images"
echo "      -n <int>:    display page number <n>" 
exit
}

function clean_and_exit() {
rm -rf "$tmp_dir"
clear
exit
}

function get_window_info() {
get_pane_size
if [[ "$os" != "Darwin" ]]; then
    get_xterm_info
#    get_xterm_font_factors
    get_xterm_position
fi
}

function blank_if_not_integer() {
if [ $1 -eq $1 ] 2> /dev/null;
then
    printf $1
else
    printf ""
fi
}

function list_marks() {
message="marks:"
for reg in ${!mark[@]}; do
    message="$message $reg:${mark[$reg]}"
done
}

function debug() {
printf "$clearstring" | w3mimgdisplay
}

function check_count() {
    [[ $count == "" ]] && count=1
}

function read_command() {
read -n 1 command # await command
case "$command" in
    $'\e')
        ;;
    [0-9])
        count="${count}${command}"
        read_command
        ;;
    "${keys['previous-page']}")
        check_count
        if [[ $split == "false" ]]; then
            n=$[$n - $count]
        elif [[ $n =~ B$ ]]; then
            n=$[${n%B} - (count / 2)]B
            if [[ $[count % 2] -eq 1 ]]; then
                n=${n%B}A
            fi
        else
            n=$[${n%A} - ( $count / 2)]A
            if [[ $[count % 2] -eq 1 ]]; then
                n="$[${n%A} - 1]B"
            fi
        fi
        message=""
        ;; # go back a page
    "${keys['next-page']}"|'')
        check_count
        if [[ $split == "false" ]]; then
            n=$[$n + $count] 
        elif [[ $n =~ B$ ]]; then
            n=$[${n%B} + (count / 2)]B
            if [[ $[count % 2] -eq 1 ]]; then
                n=$[${n%B} + 1]A
            fi
        else
            n=$[${n%A} + (count / 2)]A
            if [[ $[count % 2] -eq 1 ]]; then
                n="${n%A}B"
            fi
        fi
        message=""
        ;;
    "${keys['next-doc']}")
        check_count
        new_doc=$[$cur_doc + ( $count % ${#files[@]} )]
        switch_doc $new_doc
        ;;
    "${keys['previous-doc']}")
        check_count
        new_doc=$[ $cur_doc - ( $count % ${#files[@]} )]
        switch_doc $new_doc 
        ;;
    "${keys['refresh-view']}")
        get_window_info # clean up and resize to fit pane
        message=""
        clear
        ;;
    "${keys['reload-document']}")
        refresh_file # reload file 
        message=""
        clear
        ;;
    "${keys['text']}")
        if [ $display == "text" ]; then
            display="image"
        else
            display="text"
        fi
        clear
        message=""
        ;;
    "${keys['crop-margins']}")
        if [ $trimmed == "false" ]; then
            trimmed="true"
        else
            trimmed="false"
        fi
        message=""
        ;;
    "${keys['pager-toggle']}")
        if [[ "$text_pager" == "${text_pagers[1]}" ]]; then
            text_pager=${text_pagers[0]}
        else
            text_pager=${text_pagers[1]}
        fi
        message="pager: $text_pager"
        ;;
    "${keys['horizontal-split']}")
        if [[ $split == "horiz" ]]; then
            split="false"
            n=${n%[AB]}
        else
            split="horiz"
            n="${n%[AB]}A"
        fi
        message=""
        ;;
    "${keys['vertical-split']}")
        if [[ $split == "vert" ]]; then
            split="false"
            n=${n%[AB]}
        else
            split="vert"
            n="${n%[AB]}A"
        fi
        message=""
        ;;
    "${keys['print']}")
        check_count
        print_file $count
        ;;
    "${keys['wrap-toggle']}")
        if [ $wrap == "true" ]; then
            wrap="false"
        else
            wrap="true"
        fi
        message=""
        ;;
    "${keys['search']}") 
        find_text
        if [[ $index != -1 ]]; then
            n=${results[$index]%%:*}
        else
            message="no matches"
        fi;;
    "${keys['next-match']}")
        check_count
        if [[ $index -ne -1 ]]; then 
            index=$[($index + $count) % ${#results[@]}] 
            n=${results[$index]%%:*} # go to next match
            message="$[$index + 1]/${#results[@]}: ${results[$index]#*:}"
        else
            message="No matches"
        fi
        ;;
    "${keys['previous-match']}")
        check_count
        if [[ $index -ne -1 ]]; then
            index=$[($index - $count) % ${#results[@]}]
            n=${results[$index]%%:*} # go to previous match
            message="$[$index + 1]/${#results[@]}: ${results[$index]#*:}"
        else
            message="No matches"
        fi;;
    "${keys['mark-page']}")
        read -n 1 register
        case $register in
            $'\e'|"")
                ;;
            *)    
                mark[$register]="$n:$cur_doc"
                message="$n:$cur_doc stored in mark \'$register\'"
                ;;
        esac
        ;;

    "${keys['goto-last']}")   
        if [[ $count == "" ]]; then
            n=$pages
        else
            n=$count
        fi
        ;;
    "${keys['goto-page']}")   
        if [[ $count == "" ]]; then
            read -n 1 command
            case $command in
                $'\e')
                    ;;
                "${keys['goto-page']}")
                    n=1
                    message=""
                    ;;
                "${keys['to-mark']}")
                    read -n 1 register
                    case $register in
                        $'\e')
                            ;;
                        *)
                            if [[ ${mark[$register]} != "" ]]; then
                                message=""
                                switch_doc ${mark[$register]##*:} ${mark[$register]%%:*}
                            else
                                message="no mark \'$register\'"
                            fi
                            ;;
                    esac
                    ;;
            esac
        else
           n=$count
        fi
        ;;
    "${keys['to-mark']}")
        read -n 1 register
        case $register in
            $'\e')
                ;;
            *)
                if [[ ${mark[$register]} ]]; then
                    n=${mark[$register]%%:*}
                    cur_doc=${mark[$register]##*:}
                    message=""
                    display_doc $cur_doc
                else
                    message="no mark \'$register\'"
                fi
                ;;
        esac
        ;;
    "${keys['yank-pdf']}")
        if [[ $count != "" ]]; then
            extract_pdf $n $[$n + $count] 
        else
            read -n 1 command
            case $command in
                $'\e')
                    ;;
                "${keys['yank-pdf']}")
                    extract_pdf $n $n
                    ;;
                "${keys['to-mark']}")
                    read -n 1 register
                    case $register in
                        $'\e')
                            ;;
                        *)
                            if [[ ${mark[$register]} ]]; then
                                if [[ ${mark[$register]##*:} -eq $cur_doc ]]; then  
                                    extract_pdf $n ${mark[$register]%%:*}
                                else
                                    message="mark not in current document"
                                fi
                            else
                                message="no mark \'$register\'"
                            fi
                            ;;
                    esac
                    ;;
            esac
        fi
        ;;
     "${keys['yank-text']}")
        if [[ $count != "" ]]; then
            yank_text $n $[$n + $count] 
        else
            read -n 1 command
            case $command in
                $'\e')
                    ;;
                "${keys['yank-text']}")
                    yank_text $n $n
                    ;;
                "${keys['to-mark']}")
                    read -n 1 register
                    case $register in
                        $'\e')
                            ;;
                        *)
                            if [[ ${mark[$register]} ]]; then
                                if [[ ${mark[$register]##*:} -eq $cur_doc ]]; then  
                                    yank_text $n ${mark[$register]%%:*}
                                else
                                    message="mark not in current document"
                                fi
                            else
                                message="no mark \'$register\'"
                            fi
                            ;;
                    esac
                    ;;
                [0-9])   
                    ;;
            esac
        fi
        ;;
    "${keys['open-file']}")
        open_file
        ;;
    "${keys['help']}")
        print_help
        message=""
        ;;
    "${keys['debug']}")
        debug
        ;;
    "${keys['quit']}")
        clean_and_exit
        ;;
esac
}

function display_doc() {

cur_doc=$1
input_file="${files[$cur_doc]}"
ft=${input_file##*.}

if [[ $split == "" ]]; then split="false"; fi

check_dependencies

# How many pages does the file have?
get_pages

tmp_file_root="${tmp_dir}/tmp-${cur_doc}-"

# Postscript? Convert to PDF and relaunch
if [[ $ft == 'ps' ]]; then
    ps2pdf "$input_file" "${tmp_dir}/tmp.pdf"
    $0 "${tmp_dir}/tmp.pdf"
    clean_and_exit 
fi

# clear the pane since we don't always fill it
#clear


# display the document 

while true
do
    # make sure the page we want exists
    page_limits
    # check the size of the pane, window, etc
    get_window_info
    # Convert the page to be displayed
    convert_page $n
    # Start converting surrounding pages in the background 
    convert_background 
    tput cup 0 0 
    
    if [[ $trimmed == 'true' ]]; then
        tmp_file="${tmp_file_root}-trimmed-$n.png"
    else
        tmp_file="${tmp_file_root}-$n.png"
    fi
    # display
    if [ $display == 'image' ]; then
        print_image "$tmp_file" 1 "$(base64 < "$tmp_file")"
    else
        display_text $n
    fi

    display_bar
    count=""
    read_command

done
}
#
###########################################################################

###########################################################################
# Main program
#
# Set some defaults
n=1 # start on page 1
text_pager=${text_pagers[0]}
results=( )
index=-1 
text="$" # null search text for egrep
trimmed="false" # set to true to default to trim margins
split=false # don't split pages by default
files=( )
declare -A mark


# Look for command line flags
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            cli_help
            exit
            ;;
        -t|--text)
            display="text"
           ;;
        -n)
            shift
            if [[ "$1" != [0-9]* ]]; then
                echo "Must specify a page number with -n"
                exit
            else
                n="$1"
            fi
            ;;
        -*)
            echo "Unknown option: $1"
            cli_help
            exit
            ;;
        *)
            if [ -r "$1" ] ; then
                files=( "${files[@]}" "$1" ) 
            else
                echo "$1: No such file" 
                exit
            fi
            ;;
    esac
    shift
done


# Make a tmp_dir
tmp_dir=$(gmktemp -d)
# Check to see that a file was specified on the cli
if [[ ${#files[@]} == 0 ]]; then 
    get_pane_size
    display_banner
    open_file
    echo $message 
else
    display_doc 0
fi


