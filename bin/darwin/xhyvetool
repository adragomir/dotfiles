#!/bin/bash

BASE=$HOME/.vm/xhyve

usage() {
  cat <<-EOF
Usage:
  xhyvetool register </path/to/template> <name>
  xhyvetool start    </path/to/template|name> [/path/to/disk/file]
  xhyvetool status   </path/to/template|name> [/path/to/disk/file]
  xhyvetool stop     </path/to/template|name> [/path/to/disk/file]
  xhyvetool ip       </path/to/template|name> [/path/to/disk/file]
EOF
}

error() {
  >&2 echo $1
  exit 1
}

if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

pathify() {
  try=$(grealpath $1)
  if [[ -e $try ]]; then
    echo $try
  else
    echo $BASE/$1
  fi
}

tmpdiskpath() {
  echo "$(dirname $1)/.$(basename $1)"
}

vmvars() {
    path=$(pathify $1)
    [[ ! -d "$path" ]] && error "Template / name $path not found"
    if [[ $# -eq 1 ]]; then
      disk_file=$path/hdd.img
      >&2 echo "Using default disk file $disk_file"
    else
      disk_file=$(grealpath $2)
      >&2 echo "Using disk file $disk_file"
    fi
    local tmp=$(tmpdiskpath $disk_file)
    pid_file="${tmp}.pid"
    uuid_file="${tmp}.uuid"
    mac_file="${tmp}.mac_address"
}

command=$1
shift
case "$command" in 
  register)
    path=$(grealpath $1)
    name=$2
    [[ ! -f "$path" ]] && error "Template $path not found (needs cmdline, etc)"
    [[ ! "$path" -eq "$BASE/$name" ]] && ln -s $path $BASE/$name &>/dev/null
    >&2 echo "Registered $name -> $path"
    ;;

  start)
    vmvars $1 $2
    [[ -f $pid_file ]] && error "Xhyve for $path ($disk_file) already running with pid $(cat $pid_file)"

    if [[ ! -f $uuid_file ]]; then
      uuidgen > $uuid_file
    fi

    uuid=$(cat $uuid_file)
    if [[ ! -f $mac_file ]]; then
      sudo uuid2mac $uuid > $mac_file
    fi

    KERNEL=$path/$(ls $path | egrep  "(vmlinuz|bzImage)" | head -n 1)
    INITRD=$path/$(ls $path | egrep  "(initramfs|initrd)" | head -n 1)
    CMDLINE_FILE=$path/$(ls $path | grep  "cmdline")
    CMDLINE="$(cat $CMDLINE_FILE) ${3:-}"

    ACPI=${ACPI:-""} # -A
    MEM=${MEM:-"-m 2G"}
    SMP=${SMP:-"-c 2"}
    NET=${NET:-"-s 2:0,virtio-net"}
    PCI_DEV=${PCI:-"-s 0:0,hostbridge -s 31,lpc"}
    LPC_DEV=${LPC:-"-l com1,stdio"}
    #LPC_DEV=${LPC:-"-l com1,stdio -l com2,autopty"}

    IMG_HDD="-s 4,virtio-blk,$disk_file"
    UUID="-U $uuid"

    pushd $path
    sudo nohup xhyve $ACPI $MEM $SMP $PCI_DEV $LPC_DEV $NET $IMG_CD $IMG_HDD $UUID -f kexec,$KERNEL,$INITRD,"$CMDLINE" &
    echo $! > $pid_file
    popd

    ;;
  status)
    vmvars $1 $2

    if [[ -f $pid_file ]]; then
      >&2 echo "Xhyve for $path ($disk_file) running with pid $(cat $pid_file)"
    else
      >&2 echo "Xhyve for $path ($disk_file) not running"
    fi
    ;;
  stop)
    vmvars $1 $2
    [[ -f $pid_file ]] && sudo kill $(cat $pid_file)
    >&2 echo "Stopped $path ($disk_file)"
    ;;
  ip)
    vmvars $1 $2
    mac_address=$(cat "${mac_file}")

    awk '
    {
      if ($1 ~ /^ip_address/) {
        ip_address=substr($1, 12)
      }
      if ($1 ~ /^hw_address/) {
        hw_address=substr($1, 14)
      }
      if (hw_address != "" && ip_address != "") {
        ip_addresses[hw_address]=ip_address
        hw_address=ip_address=""
      }
    }
    END {
      print ip_addresses["'$mac_address'"]
    }
    ' /var/db/dhcpd_leases
    ;;
  *)
  usage
  exit 1
esac


