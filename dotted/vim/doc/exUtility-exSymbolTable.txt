*exUtility-exSymbolTable.txt*	Plugin for symbol table

Author: Yu Jian Rong  (YuJianrong[at]GMail.com)
Maintainer: Wu Jie  (GayaEcai@N163I.UScom)
		    (remove GENIUS from Wu Jie's email before using)
For Vim version 6.0 and above
Last change: 2006 December 10


1. Overview					|exSymbolTable-Overview|
2. Prepare					|exSymbolTable-Prepare|
3. QuickStart					|exSymbolTable-QuickStart|
4. KeyMappings					|exSymbolTable-KeyMappings|
5. Commands					|exSymbolTable-Commands|
6. Options					|exSymbolTable-Options|

==============================================================================
OVERVIEW					*exSymbolTable-Overview*

The exSymbolTable plugin is a tool for quickly search symbols
The original idea in writting this plugin, is let the user have a easy and
quickly way to search symbols. The plugin has the following features:

	1: Display the symbols based on the tags-file
	2: Pick up symbol pattern and copy it into quick-view window
	3: Symbol tag jump
	  

==============================================================================
PREPARE						*exSymbolTable-Prepare*

Before using exSymbolTable, you need to install ctags in your computer, and add
the directory of ctags.exe to your environment variable.  You can download the
exuberant ctags utility from
>
	http://ctags.sourceforge.net
<
You must add the tag-file in your "set tags=" variable

You also need to install gawk in your computer, and add the diretory of
gawk.exe to your environment variable. You can download the exuberant gawk
from
>
	http://gnuwin32.sourceforge.net/packages/gawk.htm
<

==============================================================================
QUICKSTART					*exSymbolTable-QuickStart*

Here is a quick start for the user to use exSymbolTable quickly:

1: Copy the following script into your _vimrc:~
	nnoremap <silent> <Leader>ss :ExslSelectToggle<CR>
	nnoremap <silent> <Leader>sq :ExslQuickViewToggle<CR>
	nnoremap <silent> <F6> :ExslToggle<CR>
	nnoremap <A-S-l> :ExslQuickSearch<CR>/^
	nnoremap <silent> <Leader>sg :ExslGoDirectly<CR>
	let g:exSL_SymbolSelectCmd = 'TS'

	Though we don't ask you must install exTagSelect plugin, but it's
	better using exSymbolTable with exTagSelect. If you don't like to use
	the exTagSelect, let g:exSL_SymbolSelectCmd = 'ts'

2: Making Symbol Table for your project:~
	We suppose you've generate the tags and named it "tags". Now you need
	to use gawk to parsing this tag-file, and get the symbol.

	<1> Create "gawk_NoStripSymbol.cfg", copy the following script then save it:
		!/^!_TAG/{
		    KeyStr = $1;
		    Mask[KeyStr] = KeyStr;
		}
		END{
		    n = asort(Mask);
		    for (i=0;i<=n;++i)
			print(Mask[i]);
		}

	<2> Suppose you save the "gawk_NoStripSymbol.cfg" in your '$VIM\'
	    directory. now at your tag-file directory( where you put your tags-file) run:

		gawk -f "c:\Program Files\Vim\make\gawk_NoStripSymbol.cfg" tags>symbol

	<3> Now you create a symbol file. We can use the symbol-table plugin
	    analysis it

3: Open your project and now use:~
	Write some code, and forget some function name? :
		press <A-S-l>, write the general name you remembered.
		press <enter> to confirm it.
		then press <enter> to picked up the search result into the quick-view window
		now select what you want. The plugin will use 'ts'/'TS' to parsing it
		give you a clear symbol distribution in your project.
		
	At the command line type:
		:SL symbol-name to have a direct search
	
	Some time you may want to search the word under your cursor directly:
		press <leader>sg
		the plugin will picked the word and put them into quick-view
		window for you directly.
	
	If the symbol name is a class-name in C++:
		use <leader>sg also give you a clear result for all his
		members.

Now you try the things and you may known the how exSymbolTable worked. 
You can go on to read other topic for more detail
	

==============================================================================
KEYMAPPINGS					*exSymbolTable-KeyMappings*

For good understanding exSymbolTable working, you can imaging exSymbolTable as:

1: symbol-table window

		   symbol-table window
 --------------------------------------------------------------------------------------------
| <c-left>	  to quick-view window							     |
| <up> <down>     select search results							     |
| <enter>	  picked the search result and copy it into quick-view window		     |
| <space>	  resize window								     |
| <esc>		  close window								     |
| <lead>r	  replace the quick-view window with the search-pattern.similar with <enter> |
| <lead>gg	  parsing the symbole under cursor directly                                  |
 --------------------------------------------------------------------------------------------
 The main idea of search-result window is browsing symbol-table file you
 created. Like exGlobalSearch, we give you a symbol list for exactly search.
 so leave your work for quick-view window. Just pick up which symbol you want,
 the plugin will listed all matching pattern in quick-view window.


2: quick-view window

 		   quick-view window
 -----------------------------------------------------------------------
| <c-right>	  to symbol-table window				|
| <up> <down>     select search results					|
| <enter>	  parsing the symbol under cursor 			|
| <space>	  resize window						|
| <esc>		  close window						|
| <lead>r	  replace the quick-view window with the search-pattern	|
 -----------------------------------------------------------------------

 Like the quick-view window in exGlobalSearch plugin. you can edit, re-pick
 the result as you want. You can parsing the result by press <enter>.

                                         
==============================================================================
COMMANDS					*exSymbolTable-Commands*

	|:SL|				Search and display the pattern in 
					symbol-table window
	|:ExslToggle|			Toggle window
	|:ExslSelectToggle|		Toggle symbol-table window
	|:ExslQuickViewToggle|		Toggle quick-view window
	|:ExslQuickSearch|		Search and picked the pattern, then
					display it in quick-view window 
	|:SLigc|			Searching patterns ignore the case
	|:SLnoigc|			Searching patterns do not ignore the case

						
:SL [pattern]					*SL*
		Search and display the [pattern] in symbol-table window

:ExslToggle					*ExslToggle*
		Toggle the window. This will toggle the window the last time
		it is.

:ExslSelectToggle				*ExslSelectToggle*
		Toggle the symbol-table window. If the window is other-window, it will
		close it first and open the symbol-table window
		
:ExslQuickViewToggle				*ExslQuickViewToggle*
		Toggle the quick-view window. If the window is other-window, it will
		close it first and open the quick-view window
		
:ExslQuickSearch				*ExslQuickSearch*
		This will copy the word under the cursor, and search the word
		in symbol-table window, then picked the result copy them into
		quick-view window. All the things above work silent, so at the
		end you just see the quick-view window opened with the word
		you want.

:SLigc						*SLigc*
		Search the pattern ignore the case. The default setting is ignore case

:SLnoigc					*SLnoigc*
		Search the pattern do not ignore the case.exSymbolTable use smart case
		method, so you can use this setting to let the plugin turn on
		the case sensitive
                                         
==============================================================================
OPTIONS						*exSymbolTable-Options*

	|'g:exSL_window_height'|		Set the height of window
	|'g:exSL_window_width'|			Set the width of window
	|'g:exSL_window_height_increment'|	Set the height increase value of window
	|'g:exSL_window_width_increment'|	Set the width increase value of window
	|'g:exSL_window_direction'|		Set the window direction
	|'g:exSL_use_vertical_window'|		Use vertical or not
	|'g:exSL_backto_editbuf'|		Keep the cursor in edit buffer or not when window open
	|'g:exSL_close_when_selected'|		When select some things, close the windows or not


						*'g:exSL_window_height'*
g:exSL_window_height~
Set the height of the window. This variable only effect when the
g:exSL_use_vertical_window = 0
>
    let g:exSL_window_height = 20
<
						*'g:exSL_window_width'*
g:exSL_window_width~
Set the width of the window. This variable only effect when the
g:exSL_use_vertical_window = 1
>
    let g:exSL_window_width = 30
<
						*'g:exSL_window_height_increment'*
g:exSL_window_height_increment~
Set the height increase value of window. This variable only effect when the
g:exSL_use_vertical_window = 0
>
    let g:exSL_window_height_increment = 30
<
						*'g:exSL_window_width_increment'*
g:exSL_window_width_increment~
Set the width increase value of window. This variable only effect when the
g:exSL_use_vertical_window = 1
>
    let g:exSL_window_width_increment = 100
<
						*'g:exSL_window_direction'*
g:exSL_window_direction~
						'topleft'
						'botright'
Set the window direction. This variable will be affect by
g:exSL_use_vertical_window. When the vertical is true. it picked left, right
direction, when the vertical is false, it picked top, bot direction.
>
    let g:exSL_window_direction = 'botright'
<
						*'g:exSL_use_vertical_window'*
g:exSL_use_vertical_window~
Use the vertical window or the horizontal window
>
    let g:exSL_use_vertical_window = 0
<
						*'g:exSL_backto_editbuf'*
g:exSL_backto_editbuf~
If the value is 1
After open the search-window, keep the cursor in the edit-buf.
else the cursor will jump to the search-window
This will affect the selection behavior too
>
    let g:exSL_backto_editbuf = 1
<
						*'g:exSL_close_when_selected'*
g:exSL_close_when_selected~
If the value is 1
After select things in search-window, the script will close the window
immediatelly
>
    let g:exSL_close_when_selected = 0
<

 vim:ts=8 sw=8 noexpandtab tw=78 ft=help:
