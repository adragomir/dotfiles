#!/usr/bin/env python
"""mesos-tool

Usage:
  mesos-tool delete <endpoint> <framework-name> <framework-role>
  mesos-tool unreserve <endpoint> <framework-role>
"""
import re
import json
import sys
import requests

def find_frameworks_and_roles(endpoint, framework_name):
    print "Finding active frameworks named {}".format(framework_name)
    active_framework_ids = []
    active_framework_roles = set()
    frameworks = requests.get(endpoint + "/frameworks").json()
    for f in frameworks["frameworks"]:
        if f["name"] == framework_name and (f["active"] == True or (f["active"] == False and f["unregistered_time"] == 0.0)):
            print "  Found framework with id {} and role {}".format(f["id"], f["role"])
            active_framework_ids.append(f["id"])
            if f["role"] != "*":
                active_framework_roles.add(f["role"])
    return active_framework_ids, active_framework_roles

def unreserve(endpoint, framework_roles, principal=None, secret=None):
    auth=None
    if principal != None and secret != None:
        auth = (principal, secret)
    slaves = requests.get(endpoint + "/slaves").json()
    for slave in slaves["slaves"]:
        reserved_resources = slave["reserved_resources_full"]
        for role, resources in reserved_resources.iteritems():
            if role in framework_roles or (len(framework_roles) > 0 and list(framework_roles)[0] == "*"):
                persistent_disk_resources = list([r for r in resources if r.has_key("disk") and r['disk'].has_key('persistence')])
                disk_resources = list([r for r in resources if r.has_key("disk")])
                other_resources = list([r for r in resources if not r.has_key("disk")])
                print "Destroy volumes for slave {} and role {}".format(slave['id'], role)
                dv = requests.post(endpoint + "/master/destroy-volumes", data={"slaveId": slave["id"], "volumes": json.dumps(persistent_disk_resources)}, auth=auth)
                print "   ... status: {}".format(dv.status_code)

                print "Unreserve disk resources for slave {} and role {}".format(slave['id'], role)
                ur = requests.post(endpoint + "/master/unreserve", data={"slaveId": slave["id"], "resources": json.dumps(disk_resources)}, auth=auth)
                print "   ... status: {}".format(ur.status_code)

                print "Unreserve other resources for slave {} and role {}".format(slave['id'], role)
                ur = requests.post(endpoint + "/master/unreserve", data={"slaveId": slave["id"], "resources": json.dumps(other_resources)}, auth=auth)
                print "   ... status: {}".format(ur.status_code)

def delete_and_unreserve(endpoint, framework_name):
    active_framework_ids, active_framework_roles = find_frameworks_and_roles(
        endpoint, framework_name
    )
    if len(active_framework_ids) == 0:
        print "No active framework found"

    for fid in active_framework_ids:
        print "Deleting framework {}".format(fid)
        response = requests.post(endpoint + "/teardown", data={"frameworkId": fid})
        print "   ... status: {}".format(response.status_code)

    if endpoint.endswith("/mesos"):
        print "Detected possible DC/OS, checking zookeeper..."
        zookeeper_endpoint = re.sub("\/mesos$", "", endpoint) + "/exhibitor"
        service_endpoint = zookeeper_endpoint + "/exhibitor/v1/explorer/znode/dcos-service-{}".format(framework_name)
        print service_endpoint
        resp = requests.delete(service_endpoint)
        print "   ... result: {}".format(resp.status_code)

    unreserve(endpoint, active_framework_roles)

if __name__ == "__main__":
    endpoint = sys.argv[1]
    if sys.argv[2] == "delete":
        framework_name = sys.argv[3]
        delete_and_unreserve(endpoint, framework_name)
    if sys.argv[2] == "unreserve":
        if len(sys.argv) >= 4:
            framework_role = sys.argv[3]
            unreserve(endpoint, [framework_role])
        else:
            unreserve(endpoint, [])
