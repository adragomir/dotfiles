[user]
	name = Andrei Dragomir
	email = adragomi@adobe.com

[color]
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[log]
  decorate = full
  date = relative

[interactive]
  singlekey = true

[alias]
  st = status
  st2 = "ls-files --exclude-per-directory=.gitignore  --exclude-from=.git/info/exclude  -t -o -u -s -m -d"
  sts = status -sb --ignore-submodules=all -unormal
  cleanup = !git remote prune origin && git gc && git clean -df && git stash clear
  unreachable = "!git fsck --unreachable | grep commit | cut -d \\  -f3 | xargs git log --merges --no-walk"
  cat = -p cat-file -p
  ci = commit
  root = rev-parse --show-toplevel
  id = rev-parse
  this = rev-parse --abbrev-ref HEAD
  co = checkout
  d = diff --ignore-submodules=all                         # diff unstaged changes
  dc = diff --cached --ignore-submodules=all
  amend = commit --amend
  cu = checkout -p
  # Goodness (summary of diff lines added/removed/total)
  gn = goodness
  gnc = goodness --cached
  fa = fetch --all --prune
  f = fetch -p --tags
  head = !git l -1
  b = branch -v
  ba = branch -av
  h = !git head
  hp = "!source ~/bin/githelpers && show_git_head"
  l = "!source ~/bin/githelpers && pretty_git_log"
  log1 = log --pretty=oneline --abbrev-commit --decorate
	llog = log --graph --pretty=format:'%C(yellow)%h%Creset %C(bold blue)%an%Creset -%C(bold cyan)%d%Creset %s %C(green)(%cr)%Creset' --abbrev-commit --date=relative
	lg = log --pretty=format:'%C(yellow)%h %C(green)%ar %C(bold blue)%an%Creset\n%s' --abbrev-commit --date=relative	
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  pr = ! export CURRENT=$(git symbolic-ref HEAD | gsed -e "s#refs/heads/##")  && echo \"Synchronising with origin/$CURRENT...\" && git fetch origin && git rebase -p origin/$CURRENT
  prb = "!rebase() { \
         LOCAL_BRANCH=$(git symbolic-ref HEAD | sed -e \"s?.*/\\([^/]*\\)?\\1?\") && \
         echo $LOCAL_BRANCH && \
         REMOTE_BRANCH=${2:-$(git config branch.${LOCAL_BRANCH}.merge | sed -e \"s?.*/\\([^/]*\\)?\\1?\")} && \
         REMOTE_NAME=${1:-$(git config branch.${LOCAL_BRANCH}.remote)} && \
         echo \"Synchronising $LOCAL_BRANCH with $REMOTE_NAME/$REMOTE_BRANCH...\" &&\
         git stash && \
         git fetch $REMOTE_NAME && \
         git rebase -p $REMOTE_NAME/$REMOTE_BRANCH && \
         git stash pop; };\
         rebase"
  prbm = "!rebase() { \
         LOCAL_BRANCH=$(git symbolic-ref HEAD | sed -e \"s?.*/\\([^/]*\\)?\\1?\") && \
         echo $LOCAL_BRANCH && \
         REMOTE_BRANCH=master && \
         REMOTE_NAME=origin && \
         echo \"Synchronising $LOCAL_BRANCH with $REMOTE_NAME/$REMOTE_BRANCH...\" &&\
         git stash && \
         git fetch $REMOTE_NAME && \
         git rebase -p $REMOTE_NAME/$REMOTE_BRANCH && \
         git stash pop; };\
         rebase"
  rbi = ! export LOCAL_BRANCH=$(git symbolic-ref HEAD | sed -e \"s?.*/\\([^/]*\\)?\\1?\") && \
    echo $LOCAL_BRANCH && \
    export REMOTE_BRANCH=$(git config branch.${LOCAL_BRANCH}.merge | sed -e \"s?.*/\\([^/]*\\)?\\1?\") && \
    REMOTE_NAME=$(git config branch.${LOCAL_BRANCH}.remote) && \
    git rebase -i $REMOTE_NAME/$REMOTE_BRANCH
  rb = "!fn() { git stash && git rebase -i HEAD~$1 && git stash pop; }; fn"
  cos = "!fn() { git stash && git co $1 && git stash pop; }; fn"
  stash-rename = "!_() { rev=$(git rev-parse $1) && git stash drop $1 || exit 1 ; git diff-index --quiet HEAD; s=$?; [ $s != 0 ] && git stash save "tmp stash from stash-rename"; git stash apply $rev && shift && git stash save "$@" && [ $s != 0 ] && git stash pop stash@{1}; }; _"

[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[pull]
  rebase = true

[push]
  default = simple

[rebase]
  stat = true
  autostash = true

[diff]
  ignoresubmodules = all
  mnemonicprefix = true
  renameLimit = 4000

[mergetool]
  prompt = false
	keepBackup = false

[help]
	autocorrect = 1

[fetch]
  prune = true

[merge] 
  summary = true
  #tool = smerge
  #tool = araxis
  #tool = opendiff
  tool = bcomp

[core]
  legacyheaders = false
	excludesfile = /Users/adr/.gitignore_global
	editor = vim --noplugin
	quotepath = false
	pager = less -+F -+X -R -K
	autocrlf = input
	filemode = false
[pager]
  log = false

[apply]
	whitespace = nowarn

[repack]
  usedeltabaseoffset = true

[advice]
  statusHints = false
  skippedCherryPicks = false
	detachedHead = false

[gui]
	fontdiff = -family Inconsolata-g -size 13 -weight normal -slant roman -underline 0 -overstrike 0
	editor = mvim
	fontui = -family \"Noto Sans\" -size 12 -weight normal -slant roman -underline 0 -overstrike 0
	tabsize = 2

; [github]
; 	user = adragomir
;   password = ! /usr/bin/security 2>&1 >/dev/null find-generic-password -gs github | ruby -e 'print $1 if STDIN.gets =~ /^password: \\\"(.*)\\\"$/'
[hub]
  host = git.corp.adobe.com
  protocol = https

[branch]
  autosetupmerge = false
  autosetuprebase = always

[status]
  relativePaths = false
  showUntrackedFiles = all

[rerere]
	enabled = true

[giggle]
	main-window-maximized = true
	main-window-geometry = 274x34+1164+486
	history-view-vpane-position = 300
	main-window-view = FileView
	file-view-vpane-position = 443

; [url "https://github.com"]
; 	insteadOf = git://github.com

[url "git@git.corp.adobe.com:"]
  insteadOf = https://git.corp.adobe.com/

[url "github-adobe:AdobeAnalytics"]
  insteadOf = git@github.com:AdobeAnalytics

[url "github-adobe:OneAdobe"]
  insteadOf = git@github.com:OneAdobe

[grep]
	fullname = true
  extendRegexp = true
  lineNumber = true

[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
[difftool "araxis"]
  path = C:\\Program Files\\Araxis\\Araxis Merge\\compare.exe
[mergetool "araxis"]
  path = C:\\Program Files\\Araxis\\Araxis Merge\\compare.exe
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Users/adragomir/Applications/Development Tools/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[mergetool "smerge"]
	cmd = /Users/adragomi/bin/smerge mergetool \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
	trustExitCode = true
[difftool "bcomp"]
  trustExitCode = true
  cmd = "/usr/local/bin/bcomp" \"$LOCAL\" \"$REMOTE\"
[mergetool "bcomp"]
  trustExitCode = true
  cmd = "/usr/local/bin/bcomp" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
[commit]
	template = /Users/adragomir/.stCommitMsg
[cola]
	spellcheck = false
[webui]
	autoupdate = true
[credential]
	helper = manager
	helper = 
	helper = /usr/local/share/gcm-core/git-credential-manager
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[http]
	cookiefile = /Users/adragomi/.gitcookies
[credential "https://git.casuallyblue.dev"]
	provider = generic
[credential "https://dev.azure.com"]
	useHttpPath = true
