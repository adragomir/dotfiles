set-option global ui_options ncurses_assistant=off

set-option global ui_options terminal_set_title=false

## Hooks

# (case-insensitive) search
map global user / '/(?i)' -docstring 'case-insensitive search'
# map global user S 'S(?i)'

map global user > 'i▸<esc>' -docstring 'insert ▸'

declare-user-mode selection
map global selection i 's(?i)' -docstring 'case-insensitive select'
def selection-exclude %{ execute-keys %sh{
    printf 's[^\\n]+<left><left>'
}}
map global selection e :selection-exclude<ret> -docstring 'select all except input character group'
def -hidden selection %{ enter-user-mode selection }
map global user s :selection<ret> -docstring 'selection shortcuts'

# add line numbers
hook global KakBegin .* %{addhl global/ number-lines -relative}
# highlight characters in 81st column
#hook global BufCreate .*[.](md|tex) %{
    #set buffer autowrap_column 80
    #addhl regex ^\V{80}(\V) 1:Error
#}
hook global WinCreate .*[.](md|tex|rst) %{
    set buffer autowrap_column 120
    autowrap-enable
}

declare-user-mode fmt

map global fmt g '"ZZ<a-a>p|fmt --width 120 --goal 120<ret>;"Zz' -docstring 'Wrap current paragraph to 120 characters'
map global fmt G 'S\n\n+<ret>|fmt --width 120 --goal 120<ret>' -docstring 'Wrap selected block of paragraphs to 120 characters'
map global fmt c '"ZZ<a-i>p<a-j><a-h>;' -docstring 'Collapse current paragraph to one line'
map global fmt C 'S\n\n+<ret><a-i>p<a-j>' -docstring 'Collapse selected paragraphs to one line'

def -hidden fmt %{ enter-user-mode fmt }
map global user g :fmt<ret> -docstring 'paragraph formatting subcommands'

# add brackets highlighting
hook global KakBegin .* %{addhl global/ show-matching}

# highlight trailing whitespace at the end of lines
hook -group TrailingWhitespaces global KakBegin .* %{
    addhl global/ regex "[ \t]+$" 0:default,red
}

# colors
colorscheme plain-grish

# scroll offset
set global scrolloff 12,0

# tabs
## 4-space tabs
set global indentwidth 4
set global tabstop 4
## 2-space tabs for Haskell
hook global BufSetOption filetype=.*?(haskell|ruby|yaml|html|css) %{
    set buffer tabstop 2
    set buffer indentwidth 2
}
# hook global InsertChar \t %{ exec -draft -itersel h@ }

# # soft tabs (excluding makefiles and Go)
hook global BufSetOption filetype=(?!go)(?!makefile)(?!c).* %{
    hook buffer InsertChar \t %{ exec -draft -itersel h@ }
}

# hook global InsertKey <backspace> %{ try %{
  # exec -draft hGh<a-k>\A\h+\Z<ret>gihyp<lt>
# }}
map global insert <backspace> ⌫
hook global InsertChar ⌫ %{ try %{
    execute-keys <backspace>
    try %{
        execute-keys -draft hGh <a-k>\A\h+\z<ret> <lt>
    } catch %{
        execute-keys <backspace>
    }
} }

# hook global BufCreate .*[.](js|jsx|ts|tsx|html) %{
#     set buffer tabstop 2
#     set buffer indentwidth 2
# }
# set-option global disabled_hooks '.*-trim-indent'

# map global user f '/%opt{$function_start}<a-n>?%opt{$function_end}<ret>' -docstring '(not working)'

def toggle-spell %{
    try %{
        addhl window/ ranges 'spell_regions'
        spell
    } catch %{ rmhl window/ranges_spell_regions }
}
map global user <a-s> :toggle-spell<ret> -docstring 'toggle spellcheck'

# tab indents or tab-completes, depending on context
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# commented headers
# def header %{
#     on-key %{ %sh{
#         case "$kak_key" in
#             '1') echo comment-line; echo 'exec hxypj<a-h>f\ l<a-l>r=o<esc>h<a-h>d' ;;
#             '2') echo comment-line; echo 'exec hxypj<a-h>f\ l<a-l>r-o<esc>h<a-h>d' ;;
#             # '3') echo comment-line; echo 'exec I##<esc>A<ret><esc>hd' ;;
#         esac
#     } }
# }
# map global user h :header<ret> -docstring 'headers'
# '1') echo comment-line; echo 'exec hxypjxH<a-;>LLr=A<ret><esc>klr<space>j' ;;>

# auto wrap at 80 chars
#set global autowrap_column 80
#hook global WinCreate .* %{ autowrap-enable }

# Tmux integration
# ================

declare-user-mode tmux
map global tmux '\' ':tmux-terminal-horizontal kak -c %val{session}<ret>' \
    -docstring 'horizontal split'
map global tmux '<minus>' ':tmux-terminal-vertical kak -c %val{session}<ret>' \
    -docstring 'vertical split'
map global tmux c ':tmux-terminal-window kak -c %val{session}<ret>' \
    -docstring 'new window'
map global tmux y ':nop %sh{tmux set-buffer "${kak_selection}"}<ret>' \
    -docstring 'yank primary selection to tmux buffer'
map global tmux p 'o<esc>!tmux show-buffer<ret>d' \
    -docstring 'paste tmux buffer contents'
map global tmux r ':tmux-repl<ret>' -docstring 'prefix for tmux repl commands'
def -hidden tmux %{ enter-user-mode tmux }

declare-user-mode tmux-fzf
map global tmux f ':enter-user-mode tmux-fzf<ret>' -docstring 'fzf'
map global tmux-fzf '\' ':tmux-terminal-horizontal alias_call skaf<ret>' \
    -docstring 'horizontal fzf split'
map global tmux-fzf '<minus>' ':tmux-terminal-vertical alias_call skaf<ret>' \
    -docstring 'vertical fzf split'
map global tmux-fzf c ':tmux-terminal-window alias_call skaf<ret>' \
    -docstring 'new fzf window'

declare-user-mode tmux-grep
map global tmux g ':enter-user-mode tmux-grep<ret>' -docstring 'grep'
map global tmux-grep '\' ':tmux-terminal-horizontal alias_call skak<ret>' \
    -docstring 'horizontal grep split'
map global tmux-grep '<minus>' ':tmux-terminal-vertical alias_call skak<ret>' \
    -docstring 'vertical grep split'
map global tmux-grep c ':tmux-terminal-window alias_call skak<ret>' \
    -docstring 'new grep window'

# declare-user-mode tmux-repl
# map global tmux-repl '\' ':tmux-repl-horizontal<ret>' \
#     -docstring 'horizontal split'
# map global tmux-repl '<minus>' ':tmux-repl-vertical<ret>' \
#     -docstring 'vertical split'
# map global tmux-repl c ':tmux-repl-window<ret>' \
#     -docstring 'new window'
# map global tmux-repl s ':send-text<ret>' \
#     -docstring 'send selection to tmux repl'
# map global tmux-repl l 'hxH:send-text<ret>;exec ";"<ret>' \
#    -docstring 'send current line to tmux repl'
# def -hidden tmux-repl %{ enter-user-mode tmux-repl }

map global user t :tmux<ret> -docstring 'prefix for tmux subcommands'

# Git
# ===

hook global WinSetOption filetype=diff %{
    map window normal '@' /^@@<ret>
    map window normal '#' /^diff\><ret>
}

# X11 (copy/paste)
# ===============
map global user y 'y<a-|>xclip<ret>; :echo "copied selection to X11 clipboard"<ret>' -docstring 'copy to X clipboard'
map global user p '!xclip -o<ret>' -docstring 'paste from X clipboard'

# commenting
declare-user-mode commenting
map global commenting c ':comment-line<ret>' -docstring 'line comment'
map global commenting b '<a-i>pH:comment-block<ret>' -docstring 'block comment'
def comment %{ enter-user-mode commenting }
map global user c :comment<ret> -docstring 'comment commands'

# Python
# =======

hook global BufSetOption filetype=python %!
    map global user d 'iprint(f": {}")<esc>h<a-a>bs(?=[:}])<ret>:lineindent -1<ret>i' -docstring "debug print statement"
!

# Go
# ==

# test #
# test #

hook global BufSetOption filetype=yaml %!
    declare-user-mode write-code-template
    map global write-code-template c 'I# <esc>A #<esc>xypxI<esc><a-l>r#xykP' -docstring 'header comment block'
    map global user w ':enter-user-mode write-code-template<ret>' -docstring 'write code template'
!

hook global BufSetOption filetype=javascript %!
    declare-user-mode write-code-template
    map global write-code-template c 'I* <esc>A *<esc>xypI<esc>r/l<a-l>r*jxypjr/I<esc><a-l>Hr*;' -docstring 'header comment block'
    map global user w ':enter-user-mode write-code-template<ret>' -docstring 'write code template'
!

hook global BufSetOption filetype=jai %!
    declare-user-mode write-code-template
    map global write-code-template c 'I* <esc>A *<esc>xypI<esc>r/l<a-l>r*jxypjr/I<esc><a-l>Hr*;' -docstring 'header comment block'
    map global user w ':enter-user-mode write-code-template<ret>' -docstring 'write code template'
!

hook global BufSetOption filetype=go %!
    declare-user-mode write-code-template
    map global write-code-template d 'ofmt.Printf(": %v\n", )<esc>h<a-a>bs(?=[:)])<ret>:lineindent -1<ret>i' -docstring 'Printf debug statement'
    map global write-code-template l 'alog.WithFields(logrus.Fields{"error": err}).Error("")<esc><ret>:lineindent -1<ret>hhi' -docstring 'logrus error'
    map global write-code-template c 'I* <esc>A *<esc>xypI<esc>r/l<a-l>r*jxypjr/I<esc><a-l>Hr*;' -docstring 'header comment block'
    map global write-code-template b '<a-i>p<a-s>I* <esc>A *<esc>)<space>xypI<esc>r/l<a-l>r*jxypjr/I<esc><a-l>Hr*;' -docstring 'header comment block'
    map global user w ':enter-user-mode write-code-template<ret>' -docstring 'write code template'
!

# SQL
# ===

hook global BufSetOption filetype=sql %!
    declare-user-mode write-code-template
    map global write-code-template c 'I-- <esc>A --<esc>xypHr-jxypj<a-h>r-;' -docstring 'header comment block'
    map global user w ':enter-user-mode write-code-template<ret>' -docstring 'write code template'
!

# Javascript
# ==========

hook global BufSetOption filetype=javascript %!
    map global user d 'oconsole.log(":", );<esc>hh<a-a>bs(?=[:)])<ret>:lineindent -1<ret>i' -docstring "debug print statement"
!

# Markdown manipulation
# =====================

hook global BufSetOption filetype=(markdown|latex) %{
    #def build %{
        #on-key %{ %sh{
            #case "$kak_key" in
                #'d') echo 'nop "%sh{ alias_call md latex ${kak_buffile}  }" <ret>' ;;
                #'b') echo 'nop "%sh{ alias_call md beamer ${kak_buffile}  }" <ret>' ;;
            #esac
        #} }
    #}
    #map global user b :build<ret>

    # build document
    # map global user w %{ :nop "%sh{ alias_call md beamer ${kak_buffile}  }" <ret> }

    # format text with pandoc
    # map global user g %{ | pandoc --from=markdown --to=markdown --columns=80 <ret> } -docstring 'format md'

    # format github-flavored markdown with pandoc (utility, should be function)
    map global user z %{ | pandoc --from=gfm --to=gfm --columns=80 <ret> } -docstring 'format gfm'

    # custom commands
    def header %{
        on-key %{ evaluate-commands %sh{
            case "$kak_key" in
                '1') echo 'exec hxypjxHr=A<ret><esc>' ;;
                '2') echo 'exec hxypjxHr-A<ret><esc>' ;;
                '3') echo 'exec I###<space><esc>A<ret><esc>' ;;
            esac
        } }
    }
    map global user h :header<ret> -docstring 'headers'
    #map global user b %{ | pandoc-citeproc --bib2yaml --format=biblatex <ret> }

    def inline_code_helper %{ exec ',ea`f`a{.}<esc>;i' }
    def inline_code %{
        on-key %{ evaluate-commands %sh{
            case $kak_key in
                'i') echo inline_code_helper ;;
                'h') echo 'inline_code_helper;exec hs<esc><ret>' ;;
                'p') echo 'inline_code_helper;exec python<esc><ret>' ;;
                'r') echo 'inline_code_helper;exec ruby<esc><ret>' ;;
            esac
        } }
    }
    map global user i :inline_code<ret> -docstring 'inline code'
}

hook global BufSetOption filetype=(restructuredtext) %{
    # format text with pandoc
    # map global user g %{ | pandoc --from=rst --to=rst --columns=80 <ret> } -docstring 'format md'
    # format lines to 80 characters (escape backticks to preseve calls to default role)
    # map global user g %{ | sed 's/`/\\`/g' | pandoc --from=rst --to=rst --columns=81 | sed 's/\\`/`/g' <ret> } -docstring 'format rst'

    # custom commands
    def -hidden header %{
        on-key %{ evaluate-commands %sh{
            case $kak_key in
                1) echo 'exec hxypjxHr=A<ret><esc>' ;;
                2) echo 'exec hxypjxHr-A<ret><esc>' ;;
                3) echo 'exec hxypjxHr~A<ret><esc>' ;;
                4) echo 'exec hxypjxHr+A<ret><esc>' ;;
                5) echo 'exec hxypjxHr.A<ret><esc>' ;;
            esac
        } }
    }
    map global user h :header<ret> -docstring 'make header'

    declare-user-mode roles
    map global roles d 'i``<esc>hi' -docstring 'default'
    map global roles i 'i````<esc>hhi' -docstring 'literal'
    map global roles m 'i:math:``<esc>hi' -docstring 'math'
    map global roles l 'i:raw-latex:``<esc>hi' -docstring 'raw latex'
    map global roles t 'i:todo:``<esc>hi' -docstring 'todo'
    map global roles b 'i:hl-cyan:`TODO`<esc>' -docstring 'cyan todo'
    map global roles c 'i:todo:`cite`<esc>' -docstring 'todo cite'
    map global roles r 'i::``<esc>hhhi' -docstring 'empty role'
    def -hidden role %{ enter-user-mode roles }
    map global user r :role<ret> -docstring 'insert role'
}

# inline git blame
# ----------------

define-command -hidden git-blame-hover -docstring "Render git blame" %{ evaluate-commands %sh{
    blame="$(git blame -L ${kak_cursor_line},+1 ${kak_buffile} | grep -oP '^([^)]+)\)')"
    summary="$(git blame --line-porcelain -L 11,+1 main.go | grep -oP '(?<=summary )[^\n]+')"
    printf "info -anchor %d.%d '%s %s'" ${kak_cursor_line} ${kak_cursor_column} "$blame $summary"
}}
map global user h :git-blame-hover<ret> -docstring 'git blame hover'

# Formatting
# ----------

hook global WinSetOption filetype=go %{
    hook buffer -group format BufWritePost .* %{ evaluate-commands %sh{ gofumports -e -w "$kak_buffile" }; edit! }
    map global user g :go-format<ret> -docstring 'format'
}

hook global WinSetOption filetype=python %{
    hook buffer -group format BufWritePost .* %{ evaluate-commands %sh{ black "$kak_buffile" }; edit! }
}

# Plugins
# =======

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "robertmeta/plug.kak" noload
plug "alexherbo2/prelude.kak"
plug "occivink/kakoune-find"
plug "Delapouite/kakoune-palette"
plug "TeddyDD/kakoune-lf"
plug "dgrisham/connect.kak"
plug "eraserhd/kak-ansi"

# plug 'alexherbo2/connect.kak' %{
#   require-module connect-fzf
#   define-command fzf-files -params .. -file-completion -docstring 'Open selected files with fzf' %{
#     connect-terminal sh -c %{
#       edit $(fd --type file . "$@" | fzf)
#     } -- %arg{@}
#   }

#   # define-command lf -params .. -file-completion -docstring 'Start lf' %{
#   #   connect-terminal lf %arg{@}
#   # }

#   hook global RuntimeError "\d+:\d+: '\w+' (.*): is a directory" %{
#     evaluate-commands %sh{
#       directory=$kak_hook_param_capture_1
#       echo lf $directory
#     }
#   }

#   map global user u :connect-terminal<ret> -ocstring 'connect-terminal'
# }
# Modules
require-module connect-fzf

# Explore files and buffers with fzf

alias global explore-files fzf-files
declare-user-mode fzf-mode
map global fzf-mode f ':nop %sh{tmux resize-pane -Z}<ret>:fzf-files<ret>:nop %sh{tmux resize-pane -Z}<ret>' -docstring 'fuzzy search file names'
map global fzf-mode g ':nop %sh{tmux resize-pane -Z}<ret>:fzf-grep<ret>:nop %sh{tmux resize-pane -Z}<ret>' -docstring 'fuzzy search file contents'
def -hidden fzf-mode %{ enter-user-mode fzf-mode }
map global user f :fzf-mode<ret> -docstring 'enter fzf mode'

alias global explore-buffers fzf-buffers

# # # Terminal settings
# map global normal <c-w> ': enter-user-mode terminal<ret>' -docstring 'Terminal'

# # # Create a new window
# map global normal <c-t> ': connect-terminal<ret>'
# map global normal <c-n> ': connect-shell alacritty<ret>'

# # # Quit
# map global normal <c-q> ': quit!<ret>'

# # # Yank ring
# map global normal Y ': yank-ring<ret>'

# plug "alexherbo2/connect.kak" %{
#     define-command fzf-files -params .. -file-completion -docstring 'Open selected files with fzf' %{
#         connect-terminal sh -c %{
#             edit $(find --type file . "$@" | sk)
#         } -- %arg{@}
#     }
#     map global user f :fzf-files<ret> -docstring 'find files with fzf'
# }

plug "occivink/kakoune-snippets" config %{
    set-option -add global snippets_directories "%opt{plug_install_dir}/kakoune-snippet-collection/snippets"
    set global snippets_auto_expand false
    map global user m ':snippets-menu<ret>' -docstring 'snippets'
}
plug "andreyorst/kakoune-snippet-collection"

plug "occivink/kakoune-expand" config %{
    map -docstring "expand" global user x ': expand<ret>'
    # 'lock' mapping where pressing <space> repeatedly will expand the selection
    declare-user-mode expand
    map -docstring "expand" global expand <space> ': expand<ret>'
    map -docstring "expand (lock)" global user X       ': expand; enter-user-mode -lock expand<ret>'
}

# plug "andreyorst/fzf.kak" config %{
#     map global user f ':fzf-mode<ret>' -docstring 'fuzzy finder'
#     set-option global fzf_implementation 'sk'
#     set-option global fzf_file_command 'ag'
#     set-option global fzf_tmux_height '20%'
#     set-option global fzf_sk_grep_command 'ag --nogroup'
# }

# plug "alexherbo2/auto-pairs.kak" config %{
#     hook global WinCreate .* %{
#         auto-pairs-enable
#     }
# }

plug "lenormf/kakoune-extra" branch "dev" load %{
    comnotes.kak
    grepmenu.kak
    lineindent.kak
} config %{
    # map global user i ':lineindent -1<ret>' -docstring "indent selection to preceding line's level"
    # alias global li lineindent
}

plug "h-youhei/kakoune-surround" config %{
    declare-user-mode surround
    map global surround a ':surround<ret>' -docstring 'add enclosing pair'
    map global surround d ':delete-surround<ret>' -docstring 'delete enclosing pair'
    map global surround c ':change-surround<ret>' -docstring 'change enclosing pair'
    map global surround t ':select-surrounding-tag<ret>' -docstring 'select surround tag'
    map global user e ':enter-user-mode surround<ret>' -docstring 'surround'
}

plug "Delapouite/kakoune-buffers" config %{
    hook global WinDisplay .* info-buffers
    map global user a ':enter-buffers-mode<ret>' -docstring 'buffers mode'
    map global user A ':enter-user-mode -lock buffers<ret>' -docstring 'buffers mode (lock)'
    alias global bd delete-buffer
    alias global bf buffer-first
    alias global bl buffer-last
    alias global bo buffer-only
    alias global bo! buffer-only-force
}

# eval %sh{kak-lsp --config ~/dotfiles/kak-lsp/kak-lsp.toml --kakoune -s $kak_session}
# nop %sh{ (kak-lsp -s $kak_session -vvv ) > /tmp/kak-lsp.log 2>&1 < /dev/null & }
plug "ul/kak-lsp" do %{
    cargo install --locked --force --path .
} config %{

    set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

    hook global WinSetOption filetype=rust %{
        set-option global lsp_server_configuration rust.clippy_preference="on"
    }

    # hook global WinSetOption filetype=(python|rust) %{
    #     hook -group lsp window BufWritePre .* lsp-formatting-sync
    #     map global user g :lsp-formatting<ret> -docstring 'lsp format'
    # }

    hook global BufSetOption filetype=python %{
        set-option global lsp_server_configuration pyls.configurationSources=['flake8']
    }

    hook global WinSetOption filetype=(c|go|python|sh|javascript|rust|typescript) %{
        set global lsp_hover_anchor true
        map global user i :lsp-hover<ret> -docstring 'hover lsp message for current line'
        map global goto n ":lsp-find-error --include-warnings<ret>:lsp-hover<ret>" -docstring 'go to next lsp error'
        map global goto p ":lsp-find-error --previous --include-warnings<ret>:lsp-hover<ret>" -docstring 'go to previous lsp error'

        # enabled by default
        # map global goto d :lsp-definition<ret> -docstring '(lsp) go to symbol definition'
        # map global goto r :lsp-references<ret> -docstring '(lsp) go to symbol references'

        # declare-user-mode lsp
        declare-user-mode lsp-rename
        map global lsp-rename e ':lsp-rename-prompt<ret>'          -docstring 'edit'
        map global lsp-rename r ':lsp-rename '                     -docstring 'rename'
        map global lsp        r ':enter-user-mode lsp-rename<ret>' -docstring 'lsp-rename'
        map global user       l ':enter-user-mode lsp<ret>'        -docstring 'lsp'

        echo -debug "Enabling LSP for filetype %opt{filetype}"
        lsp-enable-window
    }

    # lsp-enable

    hook global KakEnd .* lsp-exit
}

