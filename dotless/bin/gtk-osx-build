#!/bin/bash

version=1.8

export PREFIX=${PREFIX-/opt/gtk}
export PATH=$PREFIX/bin:$PATH
export LIBTOOLIZE=/opt/local/bin/glibtoolize

# FIXME: We might need some more intelligent way to get the path here.
export PYTHONPATH=$PREFIX/lib/python2.3/site-packages:$PREFIX/lib/python2.3/site-packages/gtk-2.0

export XDG_DATA_DIRS="$PREFIX/share"
export PERL5LIB="$PREFIX/lib/perl5/site_perl:`perl -e 'printf "$PREFIX/Library/Perl/%vd", $^V'`"

# Needed for glib etc to pick up gettext
export LDFLAGS=-L$PREFIX/lib
export CPPFLAGS=-I$PREFIX/include

# Optionally use dual (or more) cores if available
ncpu=`sysctl -n hw.ncpu`
if [ "x$PARALLEL_BUILDS" != x -a $ncpu -ge 2 ]; then
    export MAKEFLAGS="-j`expr $ncpu + 1`"
fi

# Support install-check from jhbuild to speed up compilation
if [ -x $PREFIX/bin/install-check ]; then
    export INSTALL=$PREFIX/bin/install-check
elif [ -x $HOME/bin/install-check ]; then
    export INSTALL=$HOME/bin/install-check
fi

COMMON_OPTIONS="--prefix=$PREFIX --disable-static --enable-shared \
--disable-gtk-doc --disable-scrollkeeper"

#SOURCE=
GNOMESVNROOT=${GNOMESVNROOT-http://svn.gnome.org/svn}

if [ x$1 = xrun ]; then
    cmd="$2"
    shift 2
    exec $cmd $*
fi

if [ $# -eq 0 -o "x`echo "$*" | grep shell`" = xshell ]; then
    # Can be used in .bashrc to set a fancy prompt...
    export INSIDE_GTK_BUILD=1
    echo "Starting GTK+ OS X shell. Use 'exit' or Ctrl-D to exit."
    bash
    exit 0
fi

if [ x$1 = xclean-build ]; then
    CLEAN="make clean"
else
    CLEAN="true"
fi

CORE_MODULES="cairo gnome-common glib pango atk gtk+"
EXTRA_MODULES="libxml2 libxslt libglade gtk-engines libart_lgpl libgnomecanvas"
TEST_MODULES="loudmouth gossip"
PYGTK_MODULES="pycairo pygobject pygtk"

function print_usage
{
    echo
    echo "GTK+ on Mac OS X build script version $version."
    echo 
    echo "Usage:"
    echo "`basename $0` [bootstrap|[shell]|run <cmd>|[clean-]build [<modules>]], modules are:"
    echo " Core: $CORE_MODULES"
    echo " Extra: $EXTRA_MODULES"
    echo " Test: $TEST_MODULES"
    echo " Python: $PYGTK_MODULES"
    echo
    echo "Please see http://developer.imendio.com/projects/gtk-macosx/build-instructions"
    echo "for documentation."
    echo
}

function download
{
    BASENAME=`basename $1`

    if [ -s $BASENAME ]; then
	echo "Already downloaded"
	return 0
    fi

    echo $1
    curl $1 > $BASENAME || return 1

    return 0
}

function should_build
{
    if [ -f $1/BUILT ]; then
	echo "Already built"
	return 1
    fi

    return 0
}

function tarball_get_and_build
{
    BASENAME=`basename $1`
    DIRNAME=`echo $BASENAME | sed -e s,.tar.*,,`
    INSTCMD="make install"
    
    echo
    echo "Building $DIRNAME"
    echo -ne "\033]0;Building $DIRNAME\007"
    
    # Special case jpeg... :/
    if [ x`echo $DIRNAME | grep jpeg` != x ]; then
	INSTCMD="make install-lib"
    fi
    
    if [ x`echo $BASENAME | grep bz2` != x ]; then
	COMP="j"
    else
	COMP="z"
    fi
    
    cd $SOURCE || return 1
    download $1 || return 1
    should_build $DIRNAME || return 0
    tar ${COMP}xf $BASENAME && \
	cd $DIRNAME && \
	echo "./configure --prefix=$PREFIX $COMMON_OPTIONS $2" && \
	./configure --prefix=$PREFIX $COMMON_OPTIONS $2 && \
	make $MAKEFLAGS && $INSTCMD && touch BUILT
}

function cpan_get_and_build
{
    BASENAME=`basename $1`
    DIRNAME=`echo $BASENAME | sed -e s,.tar.*,,`
    
    echo
    echo "Building $DIRNAME"
    echo -ne "\033]0;Building $DIRNAME\007"
    
    if [ x`echo $BASENAME | grep bz2` != x ]; then
	COMP="j"
    else
	COMP="z"
    fi
    
    cd $SOURCE || return 1
    download $1 || return 1
    should_build $DIRNAME || return 0
    tar ${COMP}xf $BASENAME && \
	cd $DIRNAME && \
	perl Makefile.PL $2 PREFIX=$PREFIX && \
	make $MAKEFLAGS && \
	make install && \
	touch BUILT
}

function git_get_and_build
{
    if !(echo "$MODULES" | grep -w $2) >/dev/null; then
	return 0
    fi
    
    echo
    echo "Building $2"
    echo -ne "\033]0;Building $2\007"
    
    cd $SOURCE
    if [ -d $2 ]; then
	cd $2
	git pull || return
    else
	echo "Cloning Cairo git repository. This while take quite a while."
	git clone $1 || return
	cd $2
    fi
    
    echo "./autogen.sh $COMMON_OPTIONS $3"
    (./autogen.sh $COMMON_OPTIONS $3 && $CLEAN && make $MAKEFLAGS && make install)
}

function check_error
{
    if !(echo "$CORE_MODULES" | grep -w $1) >/dev/null; then
	echo
	echo "Build failed. Please note that $1 is NOT part of GTK+ but"
	echo "and just provided here as an example of software that"
	echo "can be used on the OS X port of GTK+."
	echo
	echo "DON'T report this failure to the GTK+ mailing list, it is"
	echo "unrelated to GTK+. If you only want to build GTK+, just run"
	echo " gtk-osx-build build core"
   fi
}

function cvs_get_and_build
{
    if !(echo "$MODULES" | grep -w $2) >/dev/null; then
	return 0
    fi
    
    echo
    echo "Building $2"
    echo -ne "\033]0;Building $2\007"
    
    cd $SOURCE
    if [ -d $2 ]; then
	cd $2
	cvs up -dP || return
    else
	cvs -d $1 co -P $2 || return
	cd $2
    fi
    
    echo "./autogen.sh $COMMON_OPTIONS $3"
    (./autogen.sh $COMMON_OPTIONS $3 && $CLEAN && make $MAKEFLAGS && make install) || check_error $2
}

function svn_get_and_build
{
    if !(echo "$MODULES" | grep -w $2) >/dev/null; then
	return 0
    fi
    
    echo
    echo "Building $2"
    echo -ne "\033]0;Building $2\007"
    
    cd $SOURCE
    if [ -d $2 ]; then
	cd $2
	svn up || return
    else
	svn co $1 $2 || return
	cd $2
    fi
    
    echo "./autogen.sh $COMMON_OPTIONS $3"
    (./autogen.sh $COMMON_OPTIONS $3 && $CLEAN && make $MAKEFLAGS && make install) || check_error $2
}

function set_automake
{
    old_AUTOMAKE=$AUTOMAKE
    old_ACLOCAL=$ACLOCAL

    export AUTOMAKE=automake-$1
    export ACLOCAL=aclocal-$1
}

function restore_automake
{
    if [ x$old_AUTOMAKE != x ]; then
	export AUTOMAKE=$old_AUTOMAKE
    else
	unset AUTOMAKE
    fi

    if [ x$old_ACLOCAL != x ]; then
	export ACLOCAL=$old_ACLOCAL
    else
	unset ACLOCAL
    fi
}

function do_exit
{
    echo -ne "\033]0;\007"
    exit
}

# Make sure to restore the title when done.
trap do_exit EXIT SIGINT SIGTERM

if [ "x`git --version 2>/dev/null`" == "x" ]; then
    echo "You need git 1.3 or newer. It's available e.g. in MacPorts (http://www.macports.org/)."
    exit 1
fi
if [ "x`svn --version 2>/dev/null`" == "x" ]; then
    echo "You need svn (subversion). It's available e.g. in MacPorts (http://www.macports.org/)."
    exit 1
fi    

mkdir -p $SOURCE 2>/dev/null || (echo "Error: Couldn't create source checkout dir $SOURCE"; exit 1)
mkdir -p $PREFIX/bin 2>/dev/null || (echo "Error: Couldn't create bin dir $PREFIX/bin"; exit 1)
    
if (echo "$*" | grep bootstrap) >/dev/null; then
    echo "Building bootstrap packages."

    GNU_MIRROR=http://people.imendio.com/richard/gtk-osx/gnu-mirror

    PACKAGES=" \
	http://heanet.dl.sourceforge.net/sourceforge/libpng/libpng-1.2.12.tar.bz2 \
	ftp://ftp.remotesensing.org/pub/libtiff/tiff-3.8.2.tar.gz \
	http://people.imendio.com/richard/gtk-osx/files/jpeg-6b.tar.gz \
	$GNU_MIRROR/gettext/gettext-0.14.5.tar.gz \
	http://heanet.dl.sourceforge.net/sourceforge/expat/expat-2.0.0.tar.gz \
	http://heanet.dl.sourceforge.net/sourceforge/freetype/freetype-2.1.10.tar.bz2 \
	http://fontconfig.org/release/fontconfig-2.3.2.tar.gz \
	http://people.imendio.com/richard/gtk-osx/files/docbook-files-2.tar.gz \
	http://people.imendio.com/richard/gtk-osx/files/gnome-doc-utils-fake-1.tar.gz \
	http://people.imendio.com/richard/gtk-osx/files/popt-1.7.tar.gz \
	"
    
    for PACKAGE in $PACKAGES; do
	tarball_get_and_build $PACKAGE || exit 1
    done

    PACKAGE=http://ftp.gnome.org/pub/GNOME/sources/gtk-doc/1.7/gtk-doc-1.7.tar.bz2
    tarball_get_and_build $PACKAGE "--with-xml-catalog=$PREFIX/etc/xml/catalog" || exit 1
    
    PACKAGE=ftp://ftp4.freebsd.org/pub/FreeBSD/ports/distfiles/XML-Parser-2.34.tar.gz
    cpan_get_and_build $PACKAGE "EXPATLIBPATH=$PREFIX/lib EXPATINCPATH=$PREFIX/include" || exit 1

    # Needed for icon-naming-utils
    PACKAGE=ftp://ftp4.freebsd.org/pub/FreeBSD/ports/distfiles/XML-Simple-2.15.tar.gz
    cpan_get_and_build $PACKAGE "EXPATLIBPATH=$PREFIX/lib EXPATINCPATH=$PREFIX/include" || exit 1

    PACKAGES=" \
	http://ftp.gnome.org/pub/GNOME/sources/intltool/0.35/intltool-0.35.0.tar.bz2 \
	http://tango.freedesktop.org/releases/icon-naming-utils-0.8.1.tar.gz \
	http://icon-theme.freedesktop.org/releases/hicolor-icon-theme-0.10.tar.gz \
	http://ftp.gnome.org/pub/GNOME/sources/gnome-icon-theme/2.16/gnome-icon-theme-2.16.1.tar.bz2 \
	"
    
    for PACKAGE in $PACKAGES; do
	tarball_get_and_build $PACKAGE || exit 1
    done
    
    echo
    echo "Done bootstrapping. Continue with \"build\" or \"shell\"."
    exit 0
fi

if [ "x$1" != xbuild -a "x$1" != xclean-build ]; then
    print_usage
    exit 1
fi

shift

MODULES=$*
if [ $# -eq 0 ]; then
    echo "Building core modules."
    MODULES="$CORE_MODULES"
elif [ "x$1" = xcore ]; then
    echo "Building core modules."
    MODULES="$CORE_MODULES"
elif [ "x$1" = xpython ]; then
    echo "Building python modules."
    MODULES="$PYGTK_MODULES"
elif [ "x$1" = xtest ]; then
    echo "Building test modules."
    MODULES="$TEST_MODULES"
elif [ "x$1" = xall ]; then
    echo "Building core+extra+test+pygtk modules."
    echo
    echo "NOTE: Unless you are not looking for test cases for debugging, you"
    echo "most likely don't want to build all modules. They might not always"
    echo "build successfully, and that is expected. If you only are interested"
    echo "in GTK+, please use the \"core\" module set."
    echo
    sleep 3
    MODULES="$CORE_MODULES $EXTRA_MODULES $TEST_MODULES $PYGTK_MODULES"
fi

if [ "x$USE_CAIRO_TARBALL" == x ]; then
    git_get_and_build git://git.cairographics.org/git/cairo cairo "--enable-pdf --enable-atsui --enable-quartz --disable-xlib" || exit 1
else
    echo "NOTE: Using tarball of Cairo. This is not recommended if not absolutely"
    echo "necessary, for example if you are behind a proxy that doesn't work with"
    echo "the GIT repository for Cairo."
    PACKAGE=http://cairographics.org/releases/cairo-1.4.4.tar.gz
    tarball_get_and_build $PACKAGE || exit 1
fi

svn_get_and_build $GNOMESVNROOT/libxml2/trunk libxml2 || exit 1
svn_get_and_build $GNOMESVNROOT/libxslt/trunk libxslt || exit 1
svn_get_and_build $GNOMESVNROOT/gnome-common/trunk gnome-common || exit 1
svn_get_and_build $GNOMESVNROOT/glib/trunk glib || exit 1
svn_get_and_build $GNOMESVNROOT/atk/trunk atk || exit 1
svn_get_and_build $GNOMESVNROOT/pango/trunk pango "--without-x" || exit 1
svn_get_and_build $GNOMESVNROOT/gtk+/trunk gtk+ "--with-gdktarget=quartz" || exit 1
svn_get_and_build $GNOMESVNROOT/gtk-engines/trunk gtk-engines || exit 1
git_get_and_build git://git.imendio.com/projects/loudmouth.git loudmouth "--with-ssl=openssl" || exit 1
svn_get_and_build $GNOMESVNROOT/libglade/trunk libglade || exit 1
svn_get_and_build $GNOMESVNROOT/gossip/trunk gossip "--with-backend=cocoa" || exit 1
cvs_get_and_build :pserver:anoncvs@cvs.freedesktop.org:/cvs/cairo pycairo || exit 1
svn_get_and_build $GNOMESVNROOT/pygobject/trunk pygobject "--disable-docs" || exit 1
svn_get_and_build $GNOMESVNROOT/pygtk/trunk pygtk "--disable-docs" || exit 1
svn_get_and_build $GNOMESVNROOT/libart_lgpl/trunk libart_lgpl "--disable-docs" || exit 1
svn_get_and_build $GNOMESVNROOT/libgnomecanvas/trunk libgnomecanvas "--disable-docs" || exit 1
svn_get_and_build $GNOMESVNROOT/gimp/trunk gimp || exit 1
svn_get_and_build $GNOMESVNROOT/libIDL/trunk libIDL || exit 1
svn_get_and_build $GNOMESVNROOT/ORBit2/trunk ORBit2 || exit 1
svn_get_and_build $GNOMESVNROOT/gconf/trunk gconf || exit 1
svn_get_and_build http://svn.gnucash.org/repo/gnucash/branches/2.0 gnucash || exit 1

# Needed for gimp:
# gtkhtml2 (optional)
# libpoppler (optional)

