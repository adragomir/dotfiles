#!/usr/bin/env bash

usage() {
cat << EOF
SYNOPSIS
    Symlinks the current folder into vendorized gopath for easy work

    $ cat .goenv 2>/dev/null
    github.com/your/package/name

USAGE
      Version information
      $ goenv version
EOF
}

link() {
  local to=$1
  local from=${2:-$PWD}

  [[ $verbose == "1" ]] && echo "Linking $from/* to $to ..."

  [[ -d "$from" ]] || return

  [[ ! -d $to ]] && mkdir -p $to

  # cleanup old symlinks
  for f in $to/*; do
      local bf=$(basename $f)
      [[ -L "$to/$bf" ]] && rm "$to/$bf"
  done

  # make new symlinks
  for f in $from/*; do 
    [[ "$f" =~ .*(\.vendor|vendor|_vendor)$ || "$f" =~ ^\..*$ ]] && continue
    local bf=$(basename $f)
    [[ $verbose == "1" ]] && echo ">> Linking $from/$bf to $to/$bf..."
    ln -vs $from/$bf $to/$bf
  done
}

gp=$(pwd)/.gopath
package=$(cat .goenv 2>/dev/null)
[[ "${package}" == "" ]] && package=$PACKAGE
[[ "${package}" == "" ]] && echo "You must set the package in PACKAGE or .goenv" && exit 1

# parse arguments
args=($@)
for arg in "${args[@]}"; do
    case $arg in
        -v)
            verbose=1
            args=(${args[@]/$arg})
            ;;
        "link")
            command=link
            args=(${args[@]/$arg})
            ;;
        "in")
            command=in
            args=(${args[@]/$arg})
            ;;
        "out")
            command=out
            args=(${args[@]/$arg})
            ;;
    esac
done

case "$command" in 
    "help")
        usage
    ;;
    "link")
        link "${gp}/src/$package"
    ;;
    "in")
        do=1
        if [[ -n $GOENV_NAME ]]; then
            [[ $verbose == "1" ]] && echo ">> Already set path to $GOPATH, exiting..."
            do=0
        fi

        if [ "$do" -eq "1" ]; then
            GOENV_OLD_GOPATH=$GOPATH
            GOENV_OLD_GOBIN=$GOBIN
            export GOENV_OLD_GOPATH GOENV_OLD_GOBIN

            GOENV_NAME=$(pwd | sed -E "s/^.*\/(.*)$/\\1/")
            GOBIN="$gp/bin"
            GOPATH="$gp"

            hash gocode 2>/dev/null && gocode set lib-path "$GOPATH"
            export GOBIN GOPATH GOENV_NAME
            [[ $verbose == "1" ]] && echo ">> Local GOPATH set."

            if [[ -n $2 ]]; then
                [[ $verbose == "1" ]] && echo ">> Running ${@:2}"
                eval ${@:2}
            fi
        fi
    ;;
    "out")
        do=1
        if [[ -z $GOENV_NAME ]]; then
            [[ $verbose == "1" ]] && echo ">> Already reverted, exiting..."
            do=0
        fi

        if [ "$do" -eq "1" ]; then
            GOBIN=$GOENV_OLD_GOBIN
            GOPATH=$GOENV_OLD_GOPATH

            export GOPATH GOBIN
            unset GOENV_OLD_GOPATH GOENV_OLD_GOBIN GOENV_NAME
            hash gocode 2>/dev/null && gocode set lib-path "$GOPATH"
            [[ $verbose == "1" ]] && echo ">> Reverted to system GOPATH."
        fi
    ;;
esac
