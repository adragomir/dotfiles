Purpose
=======
Let the user select a completion function.
Example: Word completion with CamelCase matching (-> inoremap below)

If you use a completion function I recommend creating your own mapping like this:
  inoremap <buffer> <C-x><C-w> <c-r>=vim_addon_completion#CompleteUsing('vim_addon_completion#CompleteWordsInBuffer')<cr>
This version also stores current omnifunc in the list so that you can get it back easily


  " This is an alternative. But sometimes vim pastes (arbitrary?) characters into the buffer:
  " inoremap <buffer> <C-x><c-w> <c-o>:setlocal omnifunc=vim_addon_completion#CompleteWordsInBuffer<cr><c-x><c-o>


usage
=====
- register a func:

  call vim_addon_completion#RegisterCompletionFunc({'func':'MyComplete'})

  optional keys you can pass along with 'func':
    scope: filetype name (optional)
    description: long description (optional)
    completeopt: completion options to be used for this completion function (optional)


- choose a completion function:
  commands:

  CFComplete optional-regex
  OFComplete optional-regex

  where
    C = completefunc
    O = ompnifunc


  Note: If you choose either omni or complete func and the other hasn't been
  defined yet it will be set to the next available function automatically.
  I nmost cases you don't have that many functions.

INFO:

  This plugin remaps <c-x><c-o> and <c-x><c-u>. If no function was defined
  yet you'll be asked to choose your completion func.

  use
    call vim_addon_completion#SetCompletionFunc(func)

  within a filetype file to prevent this



  This script tries hard to not interfer with existing scripts. If a completion
  function is found which is not in the function list it will be added
  automatically.


How to provide customizable matches to users
============================================

AdditionalCompletionMatchPatterns returns a regex matching CamelCase patterns.
See comment above the function.
A user can override the default behaviour.

Example usage:

fun Compl(first, base)
  if ..
  else
    let patterns = vim_addon_completion#AdditionalCompletionMatchPatterns(a:base
        \ , "your_completion_func_name", {'match_beginning_of_string': 1})
    let additional_regex = get(patterns, 'vim_regex', "")
    
    list names = ["name","another_name"]

    for n in names
      if n =~ '^'.a:base || (additional_regex != "" && a:base =~ additional_regex)
        call complete_add({'word': n, ....})
      endif
    endfor
    return []
  endif
endfun
